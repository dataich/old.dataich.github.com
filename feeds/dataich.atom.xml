<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cap'n webb</title><link href="http://blog.dataich.com/" rel="alternate"></link><link href="http://blog.dataich.com/feeds/dataich.atom.xml" rel="self"></link><id>http://blog.dataich.com/</id><updated>2015-02-21T11:20:00+09:00</updated><entry><title>「ぺちぱな。延長戦 〜あの人たちが居なくなるその前に〜」を開催しました</title><link href="http://blog.dataich.com/2015/02/21/phper-na-11th" rel="alternate"></link><updated>2015-02-21T11:20:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2015-02-21:2015/02/21/phper-na-11th</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://atnd.org/events/62323"&gt;ぺちぱな。延長戦 〜あの人たちが居なくなるその前に〜&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;10回で一区切り、、、と思いきや延長戦11回目開催しました。&lt;/p&gt;
&lt;h2&gt;ノベルゲームが出来るまでに2人でやったこと by &lt;a href="https://twitter.com/eccyun"&gt;@eccyun&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ひとつめはeccyun氏によるお話。会社の仕事の傍ら、サウンドノベルゲーム「&lt;a href="http://aohige.me/leap/"&gt;Leap 〜ときをこえて〜&lt;/a&gt;」をリリースするまでの山あり谷ありマルチ⚪︎⚪︎ありのお話。プライベートワークならではの仕事の進まなさにだいぶ苦労してた様子が伺えました。最終的にはリリースできたからよかったものの、できてなかったら笑い話にできないんだろうな。。。ともあれお疲れさまでした！&lt;/p&gt;
&lt;p&gt;&lt;img alt="@eccyun" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-11th-01.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;プロジェクト運用にNulabサービスを使うとこうなる by &lt;a href="https://twitter.com/dataich"&gt;@dataich&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ふたつめは私からヌーラボのサービスについてのお話。&lt;br /&gt;
転職エントリは書いてなかったですが、昨年10月からヌーラボにて仕事しています。もちろんヌーラボの社員もサービス使い倒しているわけですが、その中で各サービスを連携して使いやすかった部分などを紹介しました。&lt;br /&gt;
また最後はTypetalkからJenkinsにビルド指示、fastlaneを使ってCrashlyticsでベータアプリ配信というデモをやりました。若干トラブルあったりしましたが、ちゃんとiOSデバイス上にアプリの更新通知が来るところはお見せできました！&lt;br /&gt;
まり長くここに書くのもあれなので、このくらいで。&lt;/p&gt;
&lt;h2&gt;長崎とコミュニテイと私 by &lt;a href="https://twitter.com/hideAki76"&gt;@hideAki76&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最後はhideAki76氏による自身の来歴的なお話、長崎のコミュニティの変遷のお話など。いろいろ自分のマインドにも通じる部分があって大変共感できました。&lt;br /&gt;
また過去の長崎のコミュニティの写真などが出てきたりして、非常に懐かしい気分に浸れました。 en.という団体をやってらっしゃいます、何かイベントやってみたい！という方がいらっしゃいましたら、相談するといろいろと捗ると思います！&lt;/p&gt;
&lt;p&gt;&lt;img alt="@hideAki76" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-11th-02.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;締めのお言葉 by &lt;a href="https://twitter.com/tactactad"&gt;@tactactad&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;tactactad氏による締めのお言葉。ぺちぱなの始まりから今日まで、全部振り返ってくれました。11回も続けてこれたのは間違いなくこの人の功績。ありがとう。&lt;/p&gt;
&lt;p&gt;&lt;img alt="@tactactad" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-11th-03.jpg" /&gt;&lt;/p&gt;
&lt;h2&gt;最後に&lt;/h2&gt;
&lt;p&gt;私が長崎にいる間のぺちぱなはこれで最後になりました。名前はこのままかどうかは置いといて、ずっと続けてもらえれば本当に嬉しい。毎回は来れないと思いますが、長崎には度々帰ってくると思うので、その時は是非参加させてください。&lt;br /&gt;
tactactadさん、hideAki76さん、eccyunくん、三人は僕にとって特別な存在です、ありがとう！&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-11th-04.jpg" /&gt;&lt;/p&gt;</summary></entry><entry><title>「ぺちぱな。Q 〜たまには決められた通りに繰り返すのもいい〜」を開催しました</title><link href="http://blog.dataich.com/2014/07/19/phper-na-9th" rel="alternate"></link><updated>2014-07-19T11:20:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2014-07-19:2014/07/19/phper-na-9th</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://atnd.org/events/53496"&gt;ぺちぱな。Q 〜たまには決められた通りに繰り返すのもいい〜&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今回は&lt;a href="https://twitter.com/eccyun"&gt;@eccyun&lt;/a&gt;氏によるenchant.jsを使ったゲームプログラミングのハンズオンを行いました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="@tactactad氏によるいつもの開催宣言" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-9th-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;資料の中で紹介もありましたが、無償でも使えるゲームのエンジンもたくさんあって、Cocos2dやらUnityやらありますが、enchant.jsはその名のとおりJavaScriptですので、環境構築もファイル置くだけですので、かなり取っ付き易い印象でした。&lt;/p&gt;
&lt;p&gt;ありがたいことに15名以上の方に参加していただきましたが、ほとんどの方が最後まで完走していたもよう。
私の出来上がりは&lt;a href="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.contents/q/index.html"&gt;こちら&lt;/a&gt;！&lt;/p&gt;
&lt;p&gt;@eccyun、資料作成、講師とフル活躍ありがとう！&lt;/p&gt;
&lt;h2&gt;余談&lt;/h2&gt;
&lt;p&gt;お昼はいつものきしめん川瀬にて冷やし定食を頂きましたが、最高にうまかった！翌日も無性に食べたくなって、わざわざそれだけのために出掛けました。また行こうっと。&lt;/p&gt;
&lt;p&gt;&lt;img alt="きしめん川瀬の冷やしきしめん定食" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-9th-02.jpg" /&gt;&lt;/p&gt;</summary></entry><entry><title>LiveDiag 1.2.0 をリリースしました</title><link href="http://blog.dataich.com/2014/04/11/livediag-1-2-0-released" rel="alternate"></link><updated>2014-04-11T23:30:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2014-04-11:2014/04/11/livediag-1-2-0-released</id><summary type="html">&lt;p&gt;LiveDiag 1.2.0をリリースしました！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/dataich/LiveDiag/releases/tag/1.2.0"&gt;1.2.0 released · dataich/LiveDiag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;変更点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;CSSを調整&lt;/li&gt;
&lt;li&gt;ダイアグラム部分の出力をSVGにしました (次期リリースではimageまたsvgを選べるようにします)&lt;/li&gt;
&lt;li&gt;SVGを外部ファイルに出力しました&lt;/li&gt;
&lt;li&gt;保存周りを強化し、.md保存時にダイアグラム部分をMarkdown記法でのimageに変換し、他のMarkdownソフト等でも読み込めるようにしました&lt;/li&gt;
&lt;li&gt;ウィンドウサイズの保存&lt;/li&gt;
&lt;li&gt;フルスクリーンサポート&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>「ぺちぱな。777 〜春は曙、2014年は3DCGも？〜」を開催しました</title><link href="http://blog.dataich.com/2014/02/23/phper-na-7th" rel="alternate"></link><updated>2014-02-23T11:20:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2014-02-23:2014/02/23/phper-na-7th</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/47765"&gt;ぺちぱな。777 〜春は曙、2014年は3DCGも？〜&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="image" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-7th-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;ぺちぱなも今回でなんと7回目。今回は&lt;a href="https://twitter.com/t__kuma"&gt;@t__kuma&lt;/a&gt;氏と&lt;a href="https://twitter.com/gh_tnmt"&gt;@gh_tnmt&lt;/a&gt;氏にBlenderを使った3D CGの作成をワークショップ形式で行っていただきました。&lt;/p&gt;
&lt;p&gt;まさか自分がここに立つ日が来るとは！ということで緊張してるとのことだったんですが、かなり準備されてたようで、初心者にもかなり分かりやすい内容でした。良い準備は良い結果を生むんだなと感じました。&lt;/p&gt;
&lt;p&gt;前半に3D CG制作の考えたかや、現在主流の制作ソフトの紹介などがありました。現実世界でモノを作るのと3D CGを作るのは基本的な流れは一緒とのこと。また、モノはプリミティブ（立方体、平面、円、円錐など）で表せれるということで、一夜明けた今日も周りのものを全部プリミティブに置き換えてしまう意識になりました。&lt;/p&gt;
&lt;p&gt;後半からは実際にBlenderを使用して、ダ○ボーをつくってしまおうというものでした。作業の流れとしては&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;下絵を読みこむ&lt;/li&gt;
&lt;li&gt;下絵に合わせて、プリミティブな要素を配置していく&lt;/li&gt;
&lt;li&gt;細かい部分（目や口の凹み部分）を作りこんでいく&lt;/li&gt;
&lt;li&gt;マテリアルを設定し、色を付ける&lt;/li&gt;
&lt;li&gt;UVを使用して、ロゴをはりつける（ここまで進めなかった。。）&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;結構感動したのが、下絵を使うことができるとこでした。前からみた画像と横からみた画像を読みこんでやると、こんな感じで下絵が表示されます。後はこれにそってプリミティブ要素を配置して、XYZを調整していくだけで、ベースの部分は非常に簡単にできました。絵心がない、観察眼がない自分にとっては非常にありがたかったです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-7th-02.png" /&gt;&lt;/p&gt;
&lt;p&gt;あとは細かい部分は&lt;a href="https://twitter.com/t__kuma"&gt;@t__kuma&lt;/a&gt;氏と&lt;a href="https://twitter.com/gh_tnmt"&gt;@gh_tnmt&lt;/a&gt;氏に助けてもらいながら、なんとか作ることができました。できたのがこちら&lt;/p&gt;
&lt;p&gt;&lt;img alt="image" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-7th-03.png" /&gt;&lt;/p&gt;
&lt;p&gt;感動ものでした。作っている最中はカメラ、光源のことはあまり意識していなかったのですが、レンダリングしてみると良い感じに影ができたりして、自分で作ったとは思えないくらいの感動がありました。しかし&lt;a href="https://twitter.com/inc2734"&gt;@inc2734&lt;/a&gt;氏が作ったのは、ロゴや下のビラビラまでちゃんとあった、やっぱり才能が違う。。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;blockquote class="twitter-tweet" lang="ja"&gt;&lt;p&gt;今日の成果 &lt;a href="http://t.co/9sDLLXsD6H"&gt;pic.twitter.com/9sDLLXsD6H&lt;/a&gt;&lt;/p&gt;&amp;mdash; キタジマタカシ (@inc2734) &lt;a href="https://twitter.com/inc2734/statuses/437127596266909696"&gt;2014, 2月 22&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src="//platform.twitter.com/widgets.js" charset="utf-8"&gt;&lt;/script&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;次はグラスの半透明感とか、ボーンの部分とかをやってみたいですね。非常に面白い内容だったので是非是非シリーズ化を期待しております！&lt;/p&gt;</summary></entry><entry><title>Dicstory 1.0.1 をリリースしました</title><link href="http://blog.dataich.com/2013/12/12/dicstory-1-0-1-released" rel="alternate"></link><updated>2013-12-12T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2013-12-12:2013/12/12/dicstory-1-0-1-released</id><summary type="html">&lt;p&gt;Dicstory 1.0.1をリリースしました！&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="/dicstory"&gt;Dicstory&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2&gt;変更点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X 10.9でも動作するようになりました。  &lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>LiveDiag 1.1.1 をリリースしました</title><link href="http://blog.dataich.com/2013/08/21/livediag-1-1-1-released" rel="alternate"></link><updated>2013-08-21T22:30:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2013-08-21:2013/08/21/livediag-1-1-1-released</id><summary type="html">&lt;p&gt;LiveDiag 1.1.1をリリースしました！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/dataich/LiveDiag/releases/tag/1.1.1"&gt;1.1.1 released · dataich/LiveDiag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;変更点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Mac OS X 10.7でも動作するようになりました。&lt;br /&gt;
&lt;a href="https://twitter.com/kashew_nuts"&gt;@kashew_nuts&lt;/a&gt; さん、動作確認のご協力ありがとうございました！&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>LiveDiag 1.1.0 をリリースしました</title><link href="http://blog.dataich.com/2013/08/06/livediag-1-1-0-released" rel="alternate"></link><updated>2013-08-06T21:39:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2013-08-06:2013/08/06/livediag-1-1-0-released</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.dataich.com/LiveDiag/"&gt;LiveDiag by dataich&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;変更点&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;blockdiagのPATHが設定画面から指定できるようになりました。&lt;br /&gt;
もう/usr/bin/に置く必要はありません。&lt;/li&gt;
&lt;li&gt;rackdiagに対応しました。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;1.2.0での予定&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTMLエクスポート機能の実装&lt;br /&gt;
blockdiag部分の出力形式(SVG, base64なimg)を指定してHTMLエクスポートできるように&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>ポップオーバー辞書の検索履歴を記録する。Dicstoryをリリースしました。</title><link href="http://blog.dataich.com/2013/07/31/dicstory-1-0-0-released" rel="alternate"></link><updated>2013-07-31T22:45:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2013-07-31:2013/07/31/dicstory-1-0-0-released</id><summary type="html">&lt;p&gt;辞書の履歴を記録しよう！&lt;/p&gt;
&lt;h2&gt;ポップオーバー辞書をご存知ですか？&lt;/h2&gt;
&lt;p&gt;下記の操作を行うことで、ポップオーバー辞書を引くことができます。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;単語を2本指タップし、コンテキストメニューの「辞書を検索」をタップします。&lt;/li&gt;
&lt;li&gt;単語を3本指タップします。 (要設定： システム環境設定 &amp;gt; トラックパッド &amp;gt; 調べる)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Dicstoryの機能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;バックグランドに常駐し、ポップオーバー辞書で調べた単語を記録します。&lt;/li&gt;
&lt;li&gt;記録した単語と意味をエクスポートできます。後はあなたが使用している単語帳アプリにインポートして、復習しましょう。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;現在対応している単語帳アプリ&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://itunes.apple.com/jp/app/dan-yubox-kuraudo-shi-daino/id418883412?mt=8"&gt;単語Box By kanahira&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;使用中の単語帳アプリを教えて下さい！&lt;/h2&gt;
&lt;p&gt;多くの単語帳アプリに対応したいので、是非お知らせください。
機能要望についても出来うる限り応えたいので、ご遠慮なくお伝え下さい。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;という告知をApp Storeで出す予定でしたが、コア部分でリジェクトということで、App Storeでの販売は諦めました。。ということでGumroadを使ってリリースしてみます。&lt;/p&gt;
&lt;p&gt;600円でのリリースですが、ブログやTwitterにて当アプリを紹介して頂ける方には、無料で入手できるコードをお渡ししますので、&lt;a href="http://twitter.com/dataich"&gt;@dataich&lt;/a&gt;までご連絡ください。よろしくお願いします！&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="/dicstory"&gt;Dicstory&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>blockdiagのライブプレビューアプリLiveDiag 1.0.0 をリリースしました</title><link href="http://blog.dataich.com/2013/07/31/livediag-1-0-0-released" rel="alternate"></link><updated>2013-07-31T12:21:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2013-07-31:2013/07/31/livediag-1-0-0-released</id><summary type="html">&lt;p&gt;LiveDiag 1.0.0をリリースしました！&lt;/p&gt;
&lt;p&gt;&lt;a href="http://twitter.com/tk0miya"&gt;@tk0miya&lt;/a&gt;さんが開発なさっているblockdiag、素晴らしすぎます。手軽にテキストベースでブロック図が書けます。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blockdiag.com/"&gt;ブロック図生成ツール blockdiag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;そして、blockdiagをもっと手軽に使いたい、Markdownも一緒に！という個人的な目的から始めたLiveDiag（アプリ名が安易。。）の開発ですが、それなりにまともに動いているので1.0.0としてリリースしました。コードもNew BSDライセンスで公開しています。&lt;/p&gt;
&lt;h2&gt;機能&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Markdownとblockdiagを同時にライブプレビュー&lt;/li&gt;
&lt;li&gt;seqdiag、actdiag、nwdiagにも対応&lt;/li&gt;
&lt;li&gt;印刷&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;今後&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;blockdiagは事前にインストールしておく必要があるのですが、/usr/bin/blockdiag辺りにないと動がない（symlinkでもOK）のがダサいのでどうにかしたい。&lt;br /&gt;
NSTaskでのコマンド実行時にどうもユーザの$PATHを読み込んでくれません。&lt;code&gt;/bin/bash -c&lt;/code&gt;経由で実行も試したのですが、自分のpythonbrew環境のblockdiagは実行できませんでした。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;複数のblockdiagを同時に処理した時の、パフォーマンスが気になる（自分のマシンだと問題ないが）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Markdownのヘルパーツールが欲しい（テーブル自動生成やリンク化など、Mouでできること）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;blockdiag記法のヘルプをアプリ内から見たい。（作者様に引用していいか聞く）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;インストールはこちらから&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.dataich.com/LiveDiag/"&gt;LiveDiag&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;是非お使い頂いて、フィードバック頂ければ幸いです。&lt;/p&gt;</summary></entry><entry><title>「ぺちぱな。つぎのつぎ 〜 use git as scm; 〜」をやってきました</title><link href="http://blog.dataich.com/2013/05/19/phper-na-3rd" rel="alternate"></link><updated>2013-05-19T21:35:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2013-05-19:2013/05/19/phper-na-3rd</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/39393"&gt;ぺちぱな。つぎのつぎ　〜 use git as scm; 〜&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;喋ってきましたー。&lt;/p&gt;
&lt;p&gt;今回はGitの入門編だったのですが、プログラマでないデザイナさんやモノ書きさんでも便利に使えるということを知ってもらおうという趣旨でした。参加者にはプログラマ系はもちろん、画像作る人、3Dモデリングな人などいらっしゃってまして、是非今後も使ってみようという声も頂きましたので、開催した意義はあったのかなあと思います。&lt;/p&gt;
&lt;p&gt;今後もいくつかネタを用意しており、また近々開催すると思いますので、その時は是非参加お願いします。&lt;/p&gt;
&lt;p&gt;&lt;img alt="@tactactad氏 挨拶" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-3rd-01.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="@hideAki76氏 第二部 gitってどう使うの？" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-3rd-02.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="@eccyun氏 第三部？ ぎっと、これから" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-3rd-03.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="誠での飲み会 ほとんど皆さん参加していただき15名以上いたぽい" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-3rd-04.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="ぺちぱな名物唐揚げ" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-3rd-05.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="奥にいるのが初参加の@7thworker氏。いやもう勝手にマブダチだと思ってますよ。" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-3rd-06.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="サプライズで誕生日ケーキを頂きました！かなり嬉しかった！" src="https://dl.dropboxusercontent.com/u/126064/blog.dataich.com.images/phper-na-3rd-07.jpg" /&gt;&lt;/p&gt;</summary></entry><entry><title>「ぺちぱな。よん↑ 〜 A New Warrior Has Entered the Ring! 〜」を開催しました</title><link href="http://blog.dataich.com/2013/05/19/phper-na-4th" rel="alternate"></link><updated>2013-05-19T21:35:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2013-05-19:2013/05/19/phper-na-4th</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/41296"&gt;ぺちぱな。よん↑ 〜 A New Warrior Has Entered the Ring! 〜&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;PHPer-naも今回で4回目の開催となりましたが、PHPそのものの入門編はやってませんでした。こういうイベントですからいらっしゃる方は既に基礎文法とか身につけてらっしゃる方がほとんどなのですが、敢えて基本に立ち返ってということでやってみました。それでも参加者18名(?)中、分かってる限りでは5、6名は基礎文法をご存知でない、そもそもプログラマでない方もいらっしゃいましたので、やった意義はあったのかなあと。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;PHPきほんの“き” by &lt;a href="https://twitter.com/tactactad"&gt;@tactactad&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;今回のメインであるPHPの入門編。私はあまりPHPの歴史について詳しくないのですが、話して頂いた生い立ちについては非常に興味がありました。私がPHPを始めた時は確か既にPHP5があった。。。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;ぺちPaaS by &lt;a href="https://twitter.com/dataich"&gt;@dataich&lt;/a&gt;(私)&lt;/h2&gt;
&lt;p&gt;PaaSについてお話させていただきました。普段から触ってはいましたが、今回スライドを作るにあたって物理サーバとの立ち上げ比較なんかをやりましたが、やっぱりPaaS便利だなーと思いました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;そもそもPHPってテンプレートエンジンやないですか。 by &lt;a href="https://twitter.com/hideAki76"&gt;@hideAki76&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;PHP自体テンプレートエンジンみたいなものなんですが、テンプレートエンジン使ったほうが可読性高いコードが書けるよというお話でした。僕が始めて触ったテンプレートエンジンはSmartyなのですが、今回はTwigベースのお話で勉強になりました。あまり関係ない話ですが、Twilioという音声通話アプリケーションがあるのですが、その命令であるTwiML(XML)の生成をTwigかMustacheでリファクタリングするよーという話もあります。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;オレなら超えられる、そう56byte……※。by &lt;a href="https://twitter.com/eccyun"&gt;@eccyun&lt;/a&gt; ※ 訳注 無理です。&lt;/h2&gt;
&lt;p&gt;結果的に超えられませんでした、そして追いつけませんでした。。。短くしていくにはPHPのバッドノウハウ的な所を突いていかないといけないぽいですが、そもそもFizzBuzz自体お遊びみたいなもんと誰かに言われて妙に納得しました。でも笑いを持っていけなさそうで、実はちゃんと持って行っている、そんな@eccyunにジェラシー。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;ヤンデレのUnityに愛されて眠れない～りたーんず～ by &lt;a href="https://twitter.com/reiji1020"&gt;@reiji1020&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;AR実演面白かった！！初音ミク、名前は知ってましたが、始めて音楽を聞きました。娘と一緒にプリキュアを見ている時に、最後にプリキュアがダンスするのですが、その動きがすごいなーと思ってましたが、そんな感じでした。あれをARで動かして見せたら娘が喜ぶやろうな。。そもそもそんなデータが公開されてない？誰か詳しい人(つまり@reiji1020)教えてください。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;WordBench長崎について by &lt;a href="https://twitter.com/inc2734"&gt;@inc2734&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WordPressプラグイン開発などをバリバリやっている@inc2734が、長崎のWordPressコミュニティWordBench長崎をちゃんとやっていくぞーというお話でした。僕も参加しますよ！&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;声が枯れててもいいじゃない、にんげんだもの。 by &lt;a href="https://twitter.com/evil_deguchi"&gt;@evil_deguchi&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ガジェット好き(?)の@evil_deguchiがUP by Jawboneについて話してくれました。僕も前々から欲しかったのですが、Nike+ Fuelband、Fitbit、UPの中から決めきれず、買うに至ってませんでしたが、俄然欲しくなってきました。APIと連携して色々やれるのも、プログラマにとっては嬉しいですね。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;総括&lt;/h2&gt;
&lt;p&gt;今回は若い学生さんの参加などもあり、初々しい感じがしてとても内容と目的が合致してた気がします。続けて行きたいです。次回もそのうち開催すると思います。あとここは僕らの努力も足りてないのですが、メインコンテンツ然り、LT枠然り、話す人がだいたい毎回決まってしまっているので、我こそはという方は是非声掛けて頂きたいです！ということで皆さん参加ありがとうございました！&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;追伸&lt;/h2&gt;
&lt;p&gt;今回全く写真取ってなかった。。。&lt;/p&gt;</summary></entry><entry><title>「ぺちぱな。（PHPer-na）始まり」に参加してきました</title><link href="http://blog.dataich.com/2012/10/15/phper-na" rel="alternate"></link><updated>2012-10-15T16:16:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2012-10-15:2012/10/15/phper-na</id><summary type="html">&lt;p&gt;「ぺちぱな。（PHPer-na）始まり」に参加してきました。ちょっと今回はレポート風にお届けします。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;趣旨説明&lt;/strong&gt; by @tactactadさん&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-001.jpg" /&gt; &lt;br /&gt;
もともと一緒に飲んでた時に、PHPの勉強会やりたいよねーと話したのがきっかけでもありました。（ろくろネタはもうよいですね）&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;PHPをCOBOL的に使う／職場におけるPHPの利用について。&lt;/strong&gt; by @hotta さん&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-002.jpg" /&gt; &lt;br /&gt;
リアルな現場なコードを見せていただいたり、学内インフラ（一応どことは伏せときますね）の構成など、大変興味深いお話を頂きました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;PHP5.4のき？〜四の五のPHP〜&lt;/strong&gt; by 私&lt;/h2&gt;
&lt;p&gt;&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/14732670" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen&gt; &lt;/iframe&gt; &lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="http://www.slideshare.net/dataich/php-php54-14732670" title="四の五のPHP 〜PHP5.4のき？〜" target="_blank"&gt;四の五のPHP 〜PHP5.4のき？〜&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/dataich" target="_blank"&gt;Taichiro Yoshida&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;
PHP5.4の新機能（一応メインはtrait）についてお話させていただきました。話をするにあたって色々と勉強しないといけなかったので、自分にとっても良い機会となりました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;バスとバッグ。如何にしてボクらは挟まれ、そして開放されたのか。&lt;/strong&gt; by @hideAki76 さん&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-003.jpg" /&gt; &lt;br /&gt;
タイトルだけだと全く意味不明だったのですが、某バスのドアに挟まれた話へのタイトルからメインのネタへの変換が見事過ぎました。相変わらず話が上手で、本当に参考になります。ただネタ話だけでなく、スクレイピング等の技術・ライブラリ・苦労した点などの話が面白かったです。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;WordPressのテーマをテーマにテーマっぽくテーマします。&lt;/strong&gt; by @inc2734 さん&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-004.jpg" /&gt; &lt;br /&gt;
WordPressのテーマの効率的で管理しやすい書き方についてお話頂きました。クラス化は自分もしていたのですが、複数サイトにまたがったテーマの共通化についてはあまり考えていなかったので、業務で書いた便利処理なんかをうまくまとめようと思いました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;楽しいEclipseプラグイン開発。&lt;/strong&gt; by @yuichi0301 さん&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-005.jpg" /&gt; &lt;br /&gt;
同じ会社のメンバーによります@yuichi0301君によるEclipseプラグインの実装方法について。Eclipseのビューでオセロゲームのサンプルを見せてくれたり、実際にプラグインをいちから作ってみるライブコーディング風なことをしてくれました。何かプラグイン欲しいなーと思ったら、今後は彼にお願いすることに決定しました。ちなみにこの「オセロ」については、懇親会でのあのバトルに繋がっていたのです。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;Unity3分クッキング&lt;/strong&gt; by @reiji1020 さん&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-006.jpg" /&gt; &lt;br /&gt;
UnityでARアプリ作った経験から、僕が良く知らない何かのアニメキャラを手のひらで動かそうという試みなどをお話頂きました。iPhone4とプロジェクタをVGAケーブルで繋いでデモをしてくれようとしたのですが、多分iPhone4が全出力に対応していないためか、どなたかのiPhone4SのカメラでiPhone4を写しつつデモされてました。。。子供のためにARで何か動かしてみるかなーと思いました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;&lt;strong&gt;FuelPHPで増えました、~~唐揚げ~~ボクが……&lt;/strong&gt; by @eccyun さん&lt;/h2&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-007.jpg" /&gt; &lt;br /&gt;
ごめん、君の時だけ写真を取り忘れていました。。。唐揚げで許してね。。。
今流行りのFuelPHPについて話をしてくれました。oilコマンドでのひな形生成から、表示するところまで話してくれました。次回があれば他フレームワークとの比較、優位性などを話したいと約束してくれました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;総括&lt;/h2&gt;
&lt;p&gt;いやー、皆さんお忙しい中かなり準備していただいたようで、内容もしっかりしたものになっていたと思います。参加者も15名、登壇者を合わせると20名超えという長崎にしては盛況な勉強会となりました。次回も是非たくさんの方にしゃべって頂いて、続けていけるような良い勉強会に育てていきたいです。登壇者、参加者、RTしてくれた皆様も、本当にありがとうございました。&lt;/p&gt;
&lt;hr /&gt;
&lt;h2&gt;おまけ&lt;/h2&gt;
&lt;p&gt;懇親会で私が兼ねてから切望していた、弊社メンバ@yuichi0301と@maemukiyarouさんによりますオセロ三本勝負が始まりました。@yuichi0301は元九州チャンピオン、@maemukiyarouさんは竜王（すいません良く分かりません）なのです。まあ結果を先に言うと@yuichi0301が勝つことになったのですが、その対戦の様子を写真だけあげときます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="はじまりの握手" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-008.jpg" /&gt; &lt;br /&gt;
&lt;img alt="そこに打つーー？？" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-009.jpg" /&gt; &lt;br /&gt;
&lt;img alt="和やかに終了" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/phper-na-010.jpg" /&gt;   &lt;/p&gt;
&lt;p&gt;勝負の最中の二人の会話を、周りの誰も理解できていなかったのが印象的で、盤面だけみると完全に黒優勢なのに、白は勝ちを確信してたり、我々から見るとヘンテコなとこに打っているのに、「あぁー、良い手！」など。&lt;/p&gt;
&lt;p&gt;ちなみにこのあと、私は@maemukiyarouさんと対戦させていただいたのですが、最後の10手くらいからパスするしかなくなり、魔法にかけられたみたいに、一気にひっくり返されました。。。&lt;/p&gt;
&lt;p&gt;何事も極めてる人たちの勝負、仕事振りを見るのはワクワクしますねー、ということでレポート終わりです。&lt;/p&gt;</summary></entry><entry><title>HTMLスライドをPDFに綺麗に変換する</title><link href="http://blog.dataich.com/2012/10/05/html-slides-to-pdf" rel="alternate"></link><updated>2012-10-05T22:02:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2012-10-05:2012/10/05/html-slides-to-pdf</id><summary type="html">&lt;p&gt;最近スライドを作る際、markdownで書いて、Sublime Text 2 の Markdown Slideshow でHTML化しています。
で、気づいたんです。slideshareにあげれない。。。&lt;/p&gt;
&lt;p&gt;いろいろ調べまして、PhantomJS使ったりとかしてらっしゃる方もいたのですが、cutycaptとimagemagicでやることに落ち着きました。スライドのURLが http://example.com/slide#1 slide#2 slide#3 みたいになっているやつだといけると思います。単にforで回しながら一枚一枚cutycaptでキャプチャとったものを、convertコマンドでPDFに吐いているだけです。cutycaptもimagemagicもHomebrewで入るので、環境作るのも楽でした。&lt;/p&gt;
&lt;p&gt;下記が以前landslideで作ったスライドで、PDFに変換後slideshareにあげたものです。&lt;/p&gt;
&lt;iframe src="http://www.slideshare.net/slideshow/embed_code/14602522" width="427" height="356" frameborder="0" marginwidth="0" marginheight="0" scrolling="no" style="border:1px solid #CCC;border-width:1px 1px 0;margin-bottom:5px" allowfullscreen&gt; &lt;/iframe&gt;

&lt;p&gt;&lt;div style="margin-bottom:5px"&gt; &lt;strong&gt; &lt;a href="http://www.slideshare.net/dataich/javascript-14602522" title="JavaScript きほんの&amp;#39;き&amp;#39;" target="_blank"&gt;JavaScript きほんの&amp;#39;き&amp;#39;&lt;/a&gt; &lt;/strong&gt; from &lt;strong&gt;&lt;a href="http://www.slideshare.net/dataich" target="_blank"&gt;Taichiro Yoshida&lt;/a&gt;&lt;/strong&gt; &lt;/div&gt;&lt;/p&gt;
&lt;p&gt;で、その時に作成したシェルスクリプトをあげときます。汎用的には作ってませんが、環境に合わせて少し変えればある程度は大丈夫なはずです。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/3839799.js"&gt;&lt;/script&gt;

&lt;p&gt;ちなみにcutycaptでのキャプチャが時間かかるため、変換が遅いです。ただそんなに頻繁に実行することもないので良しとしてます。もっと楽なやり方があれば是非教えて下さい。&lt;/p&gt;</summary></entry><entry><title>Homebrewで特定のプロダクトがアップグレードされないようにする</title><link href="http://blog.dataich.com/2012/08/03/exclude-specific-product-no-upgrade" rel="alternate"></link><updated>2012-08-03T21:45:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2012-08-03:2012/08/03/exclude-specific-product-no-upgrade</id><summary type="html">&lt;p&gt;brew update後、brew upgradeすると、バージョンアップ対象のものは全てアップグレードされます。&lt;br /&gt;
業務でgroonga+MySQLを使用しているのですが、groongaとMySQLのバージョンが合ってなかったりすると、多分壊れます。というかインストール時にそれでハマったので、間違ってアップグレードされてしまうと非常に困ります。他にもapacheを間違ってbrew upgrade後、brew cleanなどしてしまうとhttpd.conf消えちゃうなど。&lt;/p&gt;
&lt;p&gt;でどうするかというと、brew versionsでキープしたいバージョンのFormulaをチェックアウトしておけばいいです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew versions groonga
2.0.3    git checkout &lt;span class="m"&gt;8330960&lt;/span&gt; /usr/local/Library/Formula/groonga.rb &lt;span class="c"&gt;# キープしときたいバージョン&lt;/span&gt;
2.0.4    git checkout 409e6a8 /usr/local/Library/Formula/groonga.rb
2.0.2    git checkout d622e37 /usr/local/Library/Formula/groonga.rb
…
…

&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /usr/local
&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout &lt;span class="m"&gt;8330960&lt;/span&gt; /usr/local/Library/Formula/groonga.rb

&lt;span class="nv"&gt;$ &lt;/span&gt;brew versions mysql
5.5.25a  git checkout 2814e3a /usr/local/Library/Formula/mysql.rb
5.5.25   git checkout 5bcd1f3 /usr/local/Library/Formula/mysql.rb
5.5.24   git checkout a977fbd /usr/local/Library/Formula/mysql.rb &lt;span class="c"&gt;# キープしときたいバージョン&lt;/span&gt;
…
…

&lt;span class="nv"&gt;$ &lt;/span&gt;git checkout a977fbd /usr/local/Library/Formula/mysql.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで、brew updateしても、上記でcheckoutされたFormulaはキープされ続けるので、upgradeされることがなくなります。&lt;/p&gt;</summary></entry><entry><title>長崎でのIT系勉強会(6月)</title><link href="http://blog.dataich.com/2012/06/12/workshop-in-nagasaki-june" rel="alternate"></link><updated>2012-06-12T23:17:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2012-06-12:2012/06/12/workshop-in-nagasaki-june</id><summary type="html">&lt;p&gt;なんかいろいろと目白押しです。全部は行けないけど是非参加したいですし、主催される方々には感謝です。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/29380"&gt;web制作自習室（仮称）&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2012/06/15 17:00 to 20:00&lt;/li&gt;
&lt;li&gt;管理者 &lt;a href="http://atnd.org/users/40013"&gt;@uratti5&lt;/a&gt;さん&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/29986"&gt;JAWS-UG (AWS User Group - Japan) NAGASAKI勉強会 #02&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2012/06/26 18:00 to 21:00&lt;/li&gt;
&lt;li&gt;管理者 &lt;a href="http://atnd.org/users/24583"&gt;@hideAki1976&lt;/a&gt;さん&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/29572"&gt;UnityWorkShop&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2012/06/30 13:00 to 18:00&lt;/li&gt;
&lt;li&gt;管理者 &lt;a href="http://atnd.org/users/93049"&gt;@parin1213&lt;/a&gt;さん&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>PHPでbundlerぽいことを行うOnion、Composer</title><link href="http://blog.dataich.com/2012/01/12/onion-composer" rel="alternate"></link><updated>2012-01-12T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2012-01-12:2012/01/12/onion-composer</id><summary type="html">&lt;p&gt;pear.phpunit.de/PHPUnitを依存関係として設定する前提で、&lt;a href="https://github.com/c9s/Onion"&gt;Onion&lt;/a&gt;、&lt;a href="https://github.com/composer/composer"&gt;Composer&lt;/a&gt;を使ってみました。 &lt;/p&gt;
&lt;h2&gt;Onion&lt;/h2&gt;
&lt;p&gt;PEARモジュールのビルド、コンパイル、そして今回の目的であるbundler的なことを簡単に行えます。&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;h4&gt;homebrewの場合&lt;/h4&gt;
&lt;p&gt;gistにFormulaを置きましたので使ってください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# $ brew install --HEAD https://raw.github.com/gist/1594321/6769fa97864462c4813f06bbb08760630ba7c87f/onion.rb
$ brew install --HEAD https://raw.github.com/gist/1594321/onion.rb
# 2012/02/07 修正 実行ファイルがonion.pharからonionに変更になりましたので、Formulaを修正しました。
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;直接&lt;/h4&gt;
&lt;p&gt;onion.pharをパスの通ったディレクトリに置いて、実行権限を与えるだけ。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# $ curl https://github.com/c9s/Onion/raw/master/onion &amp;gt; ~/bin/onion 
$ curl -s http://install.onionphp.org/ | sh
# 2012/02/07 修正 インストール方法が変更されてました。
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;onion_sample
  |-- vendor
  |-- package.ini
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;プロジェクト直下にpackage.iniを作成し、ここに依存関係などを記述します。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/1598335.js"&gt;&lt;/script&gt;

&lt;p&gt;packageセクションにあるname、desc、version、authorは必須となっています。（そもそもOnionはPEARパッケージを作る際にも使うためだと思われます。）&lt;br /&gt;
requireセクションには使用したいPEARパッケージを記述します。  &lt;/p&gt;
&lt;p&gt;上記の状態で下記コマンドを実行することで、vendorディレクトリにPEARパッケージがインストールされます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;onion -d bundle
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;いやー、インストールから実行まで非常に手軽。この手軽さが素晴らしいです。&lt;/p&gt;
&lt;h2&gt;Composer&lt;/h2&gt;
&lt;p&gt;こちらもbundler的な事を行えるのですが、Onionよりもその依存関係部分に注力したパッケージマネージャといった感じです。
PEARだけに限らず、gitのリポジトリを依存関係として指定したりもできます。ただその辺りはあまり調べていないので、今回はPEARパッケージのみ使う前提で試して見ました。&lt;/p&gt;
&lt;h3&gt;インストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;brew install --HEAD https://raw.github.com/gist/1574469/composer.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;使用方法&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;composer_sample
  |-- vendor
  |-- composer.json
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;プロジェクト直下にcomposer.jsonを作成し、ここに依存関係などを記述します。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/1598338.js"&gt;&lt;/script&gt;

&lt;p&gt;上記の状態で下記コマンドを実行することで、vendorディレクトリにPEARパッケージがインストールされます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;composer.phar install
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ComposerはPEARモジュール以外も扱うためか、PEARモジュールそのものを扱うのに設定ファイルが少々複雑になります。
今回はpear.phpunit.de/PHPUnitを依存関係として設定していますが、まずそのためにrepositoriesにチャンネルを設定する必要があります。
そこまではいいのですが、PHPUnitがpear.symfony-project.com/YAMLに依存しているので、そのチャンネルも記述しておく必要があります。
つまり依存関係にある全てのチャンネルを設定しておく必要があるみたいです。これどうにかならないのでしょうか。&lt;/p&gt;
&lt;p&gt;雑感としてはPEARモジュールさえ扱えればいいのであれば、Onionの方が簡単だと思いました。
対してComposerはPEARモジュール以外にも使えるので、今後に期待できるのはComposerだと思いますが、現状は用途に合わせてといったところでしょう。
また気になる動きとして、OnionのGithubリポジトリにcomposer-supportというブランチがあるのが楽しみです。&lt;/p&gt;</summary></entry><entry><title>phpenv+php-build+pyrusでの複数バージョンPHP管理など</title><link href="http://blog.dataich.com/2012/01/11/multiple-versions-php-phpenv-phpbuild-pyrus" rel="alternate"></link><updated>2012-01-11T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2012-01-11:2012/01/11/multiple-versions-php-phpenv-phpbuild-pyrus</id><summary type="html">&lt;h2&gt;必要なもの&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;phpenv PHPのバージョン切り替え（切り替えるのみ、PHPのインストールはできない。rbenvを流用）&lt;/li&gt;
&lt;li&gt;php-build 複数バージョンPHPのインストールマネージャ&lt;/li&gt;
&lt;li&gt;Pyrus PEAR後継パッケージマネージャ&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;phpenvのインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$&lt;/span&gt; &lt;span class="nv"&gt;curl&lt;/span&gt; &lt;span class="n"&gt;https:&lt;/span&gt;&lt;span class="sr"&gt;//&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/CHH/&lt;/span&gt;&lt;span class="n"&gt;phpenv&lt;/span&gt;&lt;span class="sr"&gt;/master/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;phpenv&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;install&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;sh&lt;/span&gt;
&lt;span class="n"&gt;Installing&lt;/span&gt; &lt;span class="n"&gt;phpenv&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt; &lt;span class="sr"&gt;/Users/&lt;/span&gt;&lt;span class="n"&gt;dataich&lt;/span&gt;&lt;span class="o"&gt;/.&lt;/span&gt;&lt;span class="n"&gt;phpenv&lt;/span&gt;
&lt;span class="n"&gt;remote:&lt;/span&gt; &lt;span class="n"&gt;Counting&lt;/span&gt; &lt;span class="n"&gt;objects:&lt;/span&gt; &lt;span class="mi"&gt;1008&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;remote:&lt;/span&gt; &lt;span class="n"&gt;Compressing&lt;/span&gt; &lt;span class="n"&gt;objects:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;422&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;422&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;remote:&lt;/span&gt; &lt;span class="n"&gt;Total&lt;/span&gt; &lt;span class="mi"&gt;1008&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;633&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;reused&lt;/span&gt; &lt;span class="mi"&gt;928&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;delta&lt;/span&gt; &lt;span class="mi"&gt;558&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Receiving&lt;/span&gt; &lt;span class="n"&gt;objects:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;1008&lt;/span&gt;&lt;span class="sr"&gt;/1008), 135.47 KiB | 124 KiB/s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Resolving&lt;/span&gt; &lt;span class="n"&gt;deltas:&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="nv"&gt;%&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;633&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;633&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;Success&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;

&lt;span class="n"&gt;Now&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="sr"&gt;/Users/&lt;/span&gt;&lt;span class="n"&gt;dataich&lt;/span&gt;&lt;span class="sr"&gt;/.phpenv/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;$PATH&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;eval $(phpenv init -)&amp;quot;&lt;/span&gt; &lt;span class="n"&gt;at&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="o"&gt;~/.&lt;/span&gt;&lt;span class="n"&gt;bashrc&lt;/span&gt; &lt;span class="ow"&gt;and&lt;/span&gt; &lt;span class="n"&gt;restart&lt;/span&gt; &lt;span class="n"&gt;your&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="k"&gt;use&lt;/span&gt; &lt;span class="n"&gt;phpenv&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後の行で言われたとおり、&lt;code&gt;~/.bashrc&lt;/code&gt;に追記します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;export PATH=&amp;quot;/Users/dataich/.phpenv/bin:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;span class="x"&gt;eval &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$(&lt;/span&gt;&lt;span class="err"&gt;phpenv&lt;/span&gt; &lt;span class="err"&gt;init&lt;/span&gt; &lt;span class="err"&gt;-&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;phpenvは~/.phpenv以下にインストールされており、~/.phpenv/versionsにバージョンごとのPHPをインストールしてやることで切り替えが可能になります。&lt;/p&gt;
&lt;h2&gt;php-buildのインストール&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;git clone https://github.com/CHH/php-build.git
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;php-build
&lt;span class="nv"&gt;$ &lt;/span&gt;./install.sh
Installing php-build in /usr/local
- Creating Directories... Done.
- Copying files... Done.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで必要なもののインストールは完了です。また、現状はインストールできるPHPバージョンが増えたりした場合は、git pullして./install.shを再度実行しないといけないと思います。&lt;/p&gt;
&lt;h2&gt;php-buildを使用してPHPをインストール&lt;/h2&gt;
&lt;p&gt;まずはインストール可能なバージョンを調べます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;php-build --definitions
5.2.17
5.3.2
5.3.6
5.3.8
5.3.9RC3
5.3snapshot
5.4.0RC1
5.4.0RC2
5.4.0RC3
5.4.0RC4
5.4.0alpha3
5.4.0beta1
5.4.0beta2
5.4snapshot
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;では上記から好きなバージョンを選んでインストールしています。今回は業務で必須なので5.3.8を。&lt;/p&gt;
&lt;h2&gt;とその前にApacheモジュールどうする？&lt;/h2&gt;
&lt;p&gt;php-buildはApacheモジュールのビルドに対応していません（GitHubにIssueにはFeatureとして登録されてます。）。
ソースを読んでみるconfigure_optionを呼び出してあげればよさそうです。なのでdefinitionsに定義してあるスクリプトに変更を入れてあげます。
このdefinitions配下にあるスクリプトはいろいろビルド方法を調整する時に使えそうです（pyrusじゃなくてpear使いたかったらwith_pear書いて、install_pyrusコメントアウトするとか。）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# /usr/local/share/php-build/definitions/5.3.8
configure_option &amp;quot;--with-apxs2&amp;quot; &amp;quot;/usr/local/Cellar/httpd/2.2.21/sbin/apxs&amp;quot; #この行を追加する。apxsへのパスは環境に応じて置き換えてください。
install_package &amp;quot;http://www.php.net/distributions/php-5.3.8.tar.bz2&amp;quot;
install_pyrus

install_xdebug &amp;quot;2.1.2&amp;quot;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まあPHPをビルドする度にlibphp5.soを上書きしてしまうだろうということと、phpenvで切り替えた時どうするのっていうのはありますが・・・。&lt;/p&gt;
&lt;h2&gt;気をとりなおしてphp-buildを使用してPHPをインストール&lt;/h2&gt;
&lt;p&gt;ではphp-buildを使用して5.3.8をインストールします。プレフィックスには~/.phpenv/versions/5.3.8を指定します。実はここでちょっとはまったのですが、最後の引数はプレフィックスなのでフルパスである必要があります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;php-build 5.3.8 ~/.phpenv/versions/5.3.8
Loaded pyrus Plugin.
Loaded xdebug Plugin.
php.ini-production gets used as php.ini

Building 5.3.8 into /Users/dataich/.phpenv/versions/5.3.8

&lt;span class="o"&gt;[&lt;/span&gt;Downloading&lt;span class="o"&gt;]&lt;/span&gt;: http://www.php.net/distributions/php-5.3.8.tar.bz2
&lt;span class="o"&gt;[&lt;/span&gt;Configure&lt;span class="o"&gt;]&lt;/span&gt;: /usr/local/bin/../tmp/php-build/source/5.3.8
&lt;span class="o"&gt;[&lt;/span&gt;Make&lt;span class="o"&gt;]&lt;/span&gt;: /usr/local/bin/../tmp/php-build/source/5.3.8
&lt;span class="o"&gt;[&lt;/span&gt;Pyrus&lt;span class="o"&gt;]&lt;/span&gt;: Downloading from http://pear2.php.net/pyrus.phar
&lt;span class="o"&gt;[&lt;/span&gt;Pyrus&lt;span class="o"&gt;]&lt;/span&gt;: Installing executable in /Users/dataich/.phpenv/versions/5.3.8/bin/pyrus
&lt;span class="o"&gt;[&lt;/span&gt;XDebug&lt;span class="o"&gt;]&lt;/span&gt;: Downloading http://xdebug.org/files/xdebug-2.1.2.tgz
&lt;span class="o"&gt;[&lt;/span&gt;XDebug&lt;span class="o"&gt;]&lt;/span&gt;: Compiling in /usr/local/bin/../tmp/php-build/source/xdebug-2.1.2
&lt;span class="o"&gt;[&lt;/span&gt;XDebug&lt;span class="o"&gt;]&lt;/span&gt;: Installing XDebug configuration in /Users/dataich/.phpenv/versions/5.3.8/etc/conf.d/xdebug.ini
&lt;span class="o"&gt;[&lt;/span&gt;XDebug&lt;span class="o"&gt;]&lt;/span&gt;: Cleaning up.
&lt;span class="o"&gt;[&lt;/span&gt;Info&lt;span class="o"&gt;]&lt;/span&gt;: The Log File is not empty, but the Build did not fail. Maybe just warnings got logged. You can review the log in /usr/local/bin/../var/log/php-build/error.5.3.8.20120106174319.log
&lt;span class="o"&gt;[&lt;/span&gt;Success&lt;span class="o"&gt;]&lt;/span&gt;: Built 5.3.8 successfully.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにphp.iniは~/.phpenv/versions/5.3.8/etc配下のを使うようになっています。また~/.phpenv/versions/5.3.8/etc/conf.d配下のものも読むようになっており、
xdebug.iniなどが置いてあります。バージョンごとにiniファイルを持っているので便利です。&lt;/p&gt;
&lt;h2&gt;phpenvを使ってみる&lt;/h2&gt;
&lt;p&gt;ではphpenvにて切り替えられるバージョンを調べてみます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phpenv versions
5.3.8
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;先ほどインスールした5.3.8が使用できる状態になっていますので、グローバルに使うようにします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phpenv global 5.3.8
&lt;span class="nv"&gt;$ &lt;/span&gt;phpenv versions
* 5.3.8 &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;set &lt;/span&gt;by /Users/dataich/.rbenv-version&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="nv"&gt;$ &lt;/span&gt;php -v
PHP 5.3.8 &lt;span class="o"&gt;(&lt;/span&gt;cli&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;built: Jan &lt;span class="m"&gt;11&lt;/span&gt; &lt;span class="m"&gt;2012&lt;/span&gt; 23:20:46&lt;span class="o"&gt;)&lt;/span&gt;
Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 1997-2011 The PHP Group
Zend Engine v2.3.0, Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 1998-2011 Zend Technologies
with Xdebug v2.1.2, Copyright &lt;span class="o"&gt;(&lt;/span&gt;c&lt;span class="o"&gt;)&lt;/span&gt; 2002-2011, by Derick Rethans
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、下記のようにlocalを使うとカレントディレクトリに.rbenv-versionというファイルが作られ、そのディレクトリ配下では一度指定したバージョンが使われるようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phpenv &lt;span class="nb"&gt;local &lt;/span&gt;5.4snapshot
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;phpenv rehashコマンド&lt;/h2&gt;
&lt;p&gt;phpenvでは.phpenv/shims/にパスを通すようになっており、そこを介してexecutableなコマンドを実行したりします。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;ll .phpenv/shims
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;何もないはずです。ここを構築するにはrehashを使います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phpenv rehash
&lt;span class="nv"&gt;$ &lt;/span&gt;ll .phpenv/shims/
total 56
-rwxr-xr-x &lt;span class="m"&gt;7&lt;/span&gt; dataich staff &lt;span class="m"&gt;102&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; 23:31 phar
-rwxr-xr-x &lt;span class="m"&gt;7&lt;/span&gt; dataich staff &lt;span class="m"&gt;102&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; 23:31 phar.phar
-rwxr-xr-x &lt;span class="m"&gt;7&lt;/span&gt; dataich staff &lt;span class="m"&gt;102&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; 23:31 php
-rwxr-xr-x &lt;span class="m"&gt;7&lt;/span&gt; dataich staff &lt;span class="m"&gt;102&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; 23:31 php-config
-rwxr-xr-x &lt;span class="m"&gt;7&lt;/span&gt; dataich staff &lt;span class="m"&gt;102&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; 23:31 phpize
-rwxr-xr-x &lt;span class="m"&gt;7&lt;/span&gt; dataich staff &lt;span class="m"&gt;102&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; 23:31 pyrus
-rwxr-xr-x &lt;span class="m"&gt;7&lt;/span&gt; dataich staff &lt;span class="m"&gt;102&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="m"&gt;11&lt;/span&gt; 23:31 pyrus.phar
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを実行することでインストールされているPHPやPEARモジュールの実体を探してきて、シムリンクぽいシェルスクリプトが作成されます。新しいバージョンのPHPや、phpunitなどの実行モジュールをインストールした後には実行しておきましょう。&lt;/p&gt;
&lt;h2&gt;Pyrus&lt;/h2&gt;
&lt;p&gt;で次にPyrusです。PEARの後継にあたるパッケージマネージャです。使ってみます。php-buildでインストールした際に既に使えるようになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;pyrus config-show
Pyrus version 2.0.0a3 SHA-1: BE7EA9D171AE3873F1BBAF692EEE9165BB14BD5D
Using PEAR installation found at /Users/dataich/.phpenv/versions/5.3.8/pyrus
System paths:
&lt;span class="nv"&gt;php_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/pyrus/php
&lt;span class="nv"&gt;ext_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/lib/php/extensions/no-debug-non-zts-20090626
&lt;span class="nv"&gt;cfg_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/pyrus/cfg
&lt;span class="nv"&gt;doc_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/pyrus/docs
&lt;span class="nv"&gt;bin_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/bin/
&lt;span class="nv"&gt;data_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/pyrus/data
&lt;span class="nv"&gt;www_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/pyrus/www
&lt;span class="nv"&gt;test_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/pyrus/tests
&lt;span class="nv"&gt;src_dir&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/pyrus/src
&lt;span class="nv"&gt;php_bin&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/bin/php
&lt;span class="nv"&gt;php_ini&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/etc/php.ini
&lt;span class="nv"&gt;php_prefix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt; /Users/dataich/.phpenv/versions/5.3.8/bin/
&lt;span class="nv"&gt;php_suffix&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;&amp;gt;
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パッケージのインストール先ディレクトリ等がphpenvで指定している現在のバージョン配下になっています、素晴らしい！
これでPEARモジュールは現在使用中のPHPのバージョン配下に収まることになります。&lt;/p&gt;
&lt;p&gt;pyrusコマンドは第一引数にディレクトリを渡してやることで、そのディレクトリローカルなパッケージ管理ができるようになるので、非常に便利です。
ただphp-buildが生成するshimにバグがあって、使えない状態だったのですが、作者さんに投げたところ数時間で対応していただきました、これで常用できそうです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/CHH/php-build/issues/35"&gt;#35: Cannot use pyrus locally - Issues - CHH/php-build - GitHub&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ただし現状Pyrusだとプロジェクトローカルなインストールは簡単なのですが、依存関係の設定ファイルだけリポジトリに上げておいて、コマンド一発で全部インストールみたいなことが難しいです。
package.xmlを作ればできるようなのですが、そもそもPEARモジュールのビルド用ぽくて、扱いが難しいです。
次のエントリーではその辺りを上手く解決してくれる、Onion、Composer辺り扱ってみます。&lt;/p&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.yuyat.jp/archives/1446"&gt;phpenv で複数の PHP 環境を管理する&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.yuyat.jp/archives/1376"&gt;php-build で PHP5.4.0 beta1 をビルドする&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;&lt;a href="http://saltybeagle.com/2011/01/using-pyrus-to-manage-pear-installable-vendor-libs/"&gt;Using Pyrus To ManagePEAR Installable Vendor Libs&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>PHPUnit_Storyで振舞駆動開発なテストを書いてみた</title><link href="http://blog.dataich.com/2011/12/09/bdd-with-phpunit-story" rel="alternate"></link><updated>2011-12-09T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-12-09:2011/12/09/bdd-with-phpunit-story</id><summary type="html">&lt;p&gt;テスト対象としてEntryクラスを作成しました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ステータス（下書き・公開済・削除）を持つ。&lt;/li&gt;
&lt;li&gt;初期ステータスは下書き&lt;/li&gt;
&lt;li&gt;ステータスはメソッドを通じて変更できる。&lt;/li&gt;
&lt;/ul&gt;
&lt;script src="https://gist.github.com/1447145.js?file=Entry.php"&gt;&lt;/script&gt;

&lt;p&gt;まずはテスト駆動開発なテストを行う簡単なテストケースを書いてみました。こんなコードになります。&lt;/p&gt;
&lt;script src="https://gist.github.com/1447145.js?file=EntryTest.php"&gt;&lt;/script&gt;

&lt;p&gt;実行結果はこうなります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phpunit --debug EntryTest.php 
PHPUnit 3.6.2 by Sebastian Bergmann.

Starting &lt;span class="nb"&gt;test&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;EntryTest::testStatus&amp;#39;&lt;/span&gt;.
.

Time: &lt;span class="m"&gt;0&lt;/span&gt; seconds, Memory: 5.50Mb

OK &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="nb"&gt;test&lt;/span&gt;, &lt;span class="m"&gt;3&lt;/span&gt; assertions&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これを振舞駆動開発なテストで書きなおしてみました。PHPUnit_Extensions_Story_TestCaseをextendsし、runGiven、runWhen、runThenを実装する必要があります。&lt;/p&gt;
&lt;script src="https://gist.github.com/1447145.js?file=EntrySpec.php"&gt;&lt;/script&gt;

&lt;p&gt;実行結果はこうです。なんかそれっぽくなりました&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;phpunit --debug --verbose --printer PHPUnit_Extensions_Story_ResultPrinter_Text EntrySpec.php
PHPUnit 3.6.2 by Sebastian Bergmann.

EntrySpec
 &lt;span class="o"&gt;[&lt;/span&gt;x&lt;span class="o"&gt;]&lt;/span&gt; Status &lt;span class="k"&gt;for&lt;/span&gt; new entry is draft

   Given New Entry 
    Then Status should be draft

 &lt;span class="o"&gt;[&lt;/span&gt;x&lt;span class="o"&gt;]&lt;/span&gt; Status after publish entry is published

   Given Some Entry 
    When publish Entry 
    Then Status should be published

 &lt;span class="o"&gt;[&lt;/span&gt;x&lt;span class="o"&gt;]&lt;/span&gt; Status after delete entry is deleted

   Given Some Entry 
    When delete Entry 
    Then Status should be deleted

Scenarios: 3, Failed: 0, Skipped: 0, Incomplete: 0.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;パッと見、コード量が多くなってしまいましたが、テスト対象がサンプル程度なので。実装が増えてきたときに、runGiven、runWhen、runThenを良い感じに使いまわせるようにすると、効果大きそうです。ちなみにPHPUnit、PHPUnit_StoryともにPEARでサクッとインストール可能です。&lt;/p&gt;</summary></entry><entry><title>HomebrewでApache2.2+MySQL5.1+PHP5.3環境を構築</title><link href="http://blog.dataich.com/2011/11/01/install-apache2-2-mysql5-1php5-3-using-homebrew" rel="alternate"></link><updated>2011-11-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-11-01:2011/11/01/install-apache2-2-mysql5-1php5-3-using-homebrew</id><summary type="html">&lt;p&gt;残念ながらHomebrewのリポジトリにはApache、PHPがなく、MySQLは5.5となっています。もっともApacheとPHPに関しては、システムに入ってるものはインストールしないというHomebrewの方針なんだろうと思いますが。で探し回っているとこんなものを見つけました。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/adamv/homebrew-alt/"&gt;Alternate formulae repos for Homebrew&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;homebrewのリポジトリにはないものを野良的に公開してくださっています。上記利用させていただいて、MAMP環境を構築します。&lt;/p&gt;
&lt;h3&gt;PHP5.3のインストール&lt;/h3&gt;
&lt;p&gt;HomebrewはFomulaの直URL指定でもインストールすることができます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install https://raw.github.com/adamv/homebrew-alt/master/duplicates/php.rb --with-mysql
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにduplicatesディレクトリに入っているFomulaは、OS Xに標準で入っているものが集められています。&lt;/p&gt;
&lt;h3&gt;MySQL5.1のインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install https://raw.github.com/adamv/homebrew-alt/master/versions/mysql51.rb --with-utf8-default --use-gcc
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;初期設定&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;unset TMPDIR
mysql_install_db
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;起動・停止&lt;/h5&gt;
&lt;p&gt;私は、自動起動はさせたくなかったので、launchdには登録しませんでした。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql.server start
mysql.server stop
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Apache2.2のインストール&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;brew install https://raw.github.com/adamv/homebrew-alt/master/duplicates/httpd.rb
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;httpd.conf等は/usr/local/Cellar/httpd/2.2.21/etc/apache2にあります。&lt;/p&gt;
&lt;h5&gt;PHPなどの設定&lt;/h5&gt;
&lt;p&gt;私の場合は、extra/php.confを作成し、httpd.confにてIncludeするようにしています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;vi /usr/local/Cellar/httpd/2.2.21/etc/apache2/extra/php.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;LoadModule php5_module /usr/local/Cellar/php/5.3.8/libexec/apache2/libphp5.so
AddType application/x-httpd-php .php .php5 .phtml
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;その他に、DocumentRootを/Users/dataich/Sitesという風にユーザーホームのSitesディレクトリを使用するようにしました。この辺りはお好みで。&lt;/p&gt;
&lt;h5&gt;起動・停止&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apachectl start
sudo apachectl stop
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;あとは、phpinfo()で出力してみたりして確認すればOKです。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;追記 - 2011/11/08&lt;/strong&gt;
Homebrewで入れたPHPのpearでpermissionエラーが出ましたので、下記でもろもろ設定しました。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;chmod -R ug+w /usr/local/Cellar/php/5.3.8/lib/php
pear config-set php_ini /usr/local/etc/php.ini
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>「じゃばすく製作所（仮）ひとつめ」で話してきました</title><link href="http://blog.dataich.com/2011/10/23/javascript-factory" rel="alternate"></link><updated>2011-10-23T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-10-23:2011/10/23/javascript-factory</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/20731"&gt;じゃばすく製作所（仮）ひとつめ&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;というわけで、「じゃばすく製作所（仮）ひとつめ」で話してきました。&lt;/p&gt;
&lt;p&gt;コンテンツのアウトラインは&lt;a href="http://twitter.com/#!/tactactad"&gt;@tactactad&lt;/a&gt;さんに作ってもらい、中身は僕が書いたという感じです。前半僕がJavaScriptについて説明、後半は皆さんに計算機を作ってもらうというコンテンツでした。&lt;/p&gt;
&lt;p&gt;JavaScriptの基本の説明の部分では、関数のちょっと深い部分やプロトタイプチェーンなどの説明もやったのですが、非プログラマな方々もいらっしゃったので、ちょっと申し訳なかったです。もう少し後半の計算機制作に向けて特化した内容にしても良かったのかなあという気がします。もうこればっかりは経験。やっていくしかない。&lt;/p&gt;
&lt;p&gt;スライドは&lt;a href="http://dl.dropbox.com/u/126064/nagasaki-it/JavaScript.html"&gt;Dropbox&lt;/a&gt;に置いてますのでどうぞ。&lt;/p&gt;</summary></entry><entry><title>CORESERVERからdotCloudにWordpressをお引っ越し</title><link href="http://blog.dataich.com/2011/08/02/wordpress-on-coreserver-to-dotcloud" rel="alternate"></link><updated>2011-08-02T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-08-02:2011/08/02/wordpress-on-coreserver-to-dotcloud</id><summary type="html">&lt;p&gt;dotCloudがプライベートベータから正式リリースに至り、ベータの頃からのユーザには1年間のProアカウントを発行してくれるということで、PaaSの運用テストを兼ねて、引っ越してみることにしました。個人ではお高いのでずっとは使えませんが。。。&lt;/p&gt;
&lt;h3&gt;CORESERVERでやること&lt;/h3&gt;
&lt;p&gt;まずは、CORESERVER側のWordpressを本体、プラグインともに最新にアップデートしました。
この状態でCORESERVERの管理画面からWordpressデータベースのダンプを取ってローカルに持ってきます。
また、CORESERVER上のWordpressディレクトリもごっそりローカルに持ってきました。&lt;/p&gt;
&lt;h3&gt;dotCloud基本設定&lt;/h3&gt;
&lt;p&gt;ここからがdotCloudに対して行う作業です。
ここではアプリケーション名をwordpressとしています。&lt;/p&gt;
&lt;p&gt;dotCloudにアプリケーションを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud create wordpress
Created application &lt;span class="s2"&gt;&amp;quot;wordpress&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ローカルにディレクトリを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;mkdir blog.dataich.com
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ここにサービスの設定や、ソースコード等を置いていきます。&lt;/p&gt;
&lt;p&gt;Wordpressに必要なサービスPHP、MySQLの設定を行います。dotcloud.ymlに記述します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vi blog.dataich.com/dotcloud.yml
&lt;/pre&gt;&lt;/div&gt;


&lt;script src="https://gist.github.com/1119565.js?file=dotcloud.yml"&gt;&lt;/script&gt;

&lt;p&gt;まずはこの状態で動きを確認してみます。 dotcloud pushコマンドでアプリケーションのソースコード（とはいってもこの段階ではdotcloud.ymlのみ）をPushします。 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push wordpress blog.dataich.com
&lt;span class="c"&gt;# upload blog.dataich.com ssh://dotcloud@uploader.dotcloud.com:21122/wordpress&lt;/span&gt;
&lt;span class="c"&gt;# rsync&lt;/span&gt;
Pseudo-terminal will not be allocated because stdin is not a terminal.
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[uploader.dotcloud.com]:21122,[184.73.14.49]:21122&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
building file list ... &lt;span class="k"&gt;done&lt;/span&gt;
./
dotcloud.yml

sent &lt;span class="m"&gt;188&lt;/span&gt; bytes  received &lt;span class="m"&gt;54&lt;/span&gt; bytes  9.88 bytes/sec
total size is &lt;span class="m"&gt;52&lt;/span&gt;  speedup is 0.21
Deployment &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;wordpress&amp;quot;&lt;/span&gt; triggered. Will be available in a few seconds.
2011-08-01 23:04:54 &lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt; Waiting &lt;span class="k"&gt;for&lt;/span&gt; the build. &lt;span class="o"&gt;(&lt;/span&gt;It may take a few minutes&lt;span class="o"&gt;)&lt;/span&gt;
2011-08-01 23:04:54 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Deploying...
2011-08-01 23:04:54 &lt;span class="o"&gt;[&lt;/span&gt;data.0&lt;span class="o"&gt;]&lt;/span&gt; Deploying...
2011-08-01 23:05:25 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Service booted
2011-08-01 23:05:35 &lt;span class="o"&gt;[&lt;/span&gt;data.0&lt;span class="o"&gt;]&lt;/span&gt; Service booted
2011-08-01 23:05:35 &lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt; All the services are ready. Beginning the build.
2011-08-01 23:05:36 &lt;span class="o"&gt;[&lt;/span&gt;data.0&lt;span class="o"&gt;]&lt;/span&gt; The build started
2011-08-01 23:05:36 &lt;span class="o"&gt;[&lt;/span&gt;data.0&lt;span class="o"&gt;]&lt;/span&gt; This service &lt;span class="nb"&gt;type &lt;/span&gt;does not support build method, ignoring...
2011-08-01 23:05:36 &lt;span class="o"&gt;[&lt;/span&gt;data.0&lt;span class="o"&gt;]&lt;/span&gt; The build finished successfully
2011-08-01 23:05:36 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; The build started
2011-08-01 23:05:36 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Fetched code revision rsync-1312214692.31
2011-08-01 23:05:37 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Updating channel &lt;span class="s2"&gt;&amp;quot;doc.php.net&amp;quot;&lt;/span&gt;
2011-08-01 23:05:37 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Update of Channel &lt;span class="s2"&gt;&amp;quot;doc.php.net&amp;quot;&lt;/span&gt; succeeded
2011-08-01 23:05:37 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Updating channel &lt;span class="s2"&gt;&amp;quot;pear.php.net&amp;quot;&lt;/span&gt;
2011-08-01 23:05:38 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Channel &lt;span class="s2"&gt;&amp;quot;pear.php.net&amp;quot;&lt;/span&gt; is up to date
2011-08-01 23:05:38 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Updating channel &lt;span class="s2"&gt;&amp;quot;pecl.php.net&amp;quot;&lt;/span&gt;
2011-08-01 23:05:38 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Update of Channel &lt;span class="s2"&gt;&amp;quot;pecl.php.net&amp;quot;&lt;/span&gt; succeeded
2011-08-01 23:05:38 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; -su: line 0: &lt;span class="nb"&gt;cd&lt;/span&gt;: current: No such file or directory
2011-08-01 23:05:39 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; -su: line 0: &lt;span class="nb"&gt;cd&lt;/span&gt;: current: No such file or directory
2011-08-01 23:05:39 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; Reloading nginx configuration: nginx.
2011-08-01 23:05:42 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; php5-fpm: stopped
2011-08-01 23:05:42 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; php5-fpm: ERROR &lt;span class="o"&gt;(&lt;/span&gt;abnormal termination&lt;span class="o"&gt;)&lt;/span&gt;
2011-08-01 23:05:42 &lt;span class="o"&gt;[&lt;/span&gt;www.0&lt;span class="o"&gt;]&lt;/span&gt; The build finished successfully
2011-08-01 23:05:42 &lt;span class="o"&gt;[&lt;/span&gt;api&lt;span class="o"&gt;]&lt;/span&gt; Deploy finished

Deployment finished. Your application is available at the following URLs
www: http://xxxxxxxx.dotcloud.com/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最後の行にサービスwww（PHP）のURLが発行されているので、アクセスしてみます。当然何のリソースもPushしていないので、404が返ってくるかと思います。&lt;/p&gt;
&lt;h3&gt;データの移行&lt;/h3&gt;
&lt;p&gt;CORESERVERからとったデータベースダンプをdotCloud上のMySQLにロードします。そのためにdotCloudにデータベース、ユーザの作成をしておきます。&lt;/p&gt;
&lt;p&gt;まずは、dotcloud infoでMySQLサービスの情報を取得します。ここでは書きませんが、rootパスワードその他情報が表示されるはずです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud info wordpress.data
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次のコマンドでMySQLのシェルにログインします。 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run wordpress.data -- mysql -u root -p
&lt;span class="c"&gt;# mysql -u root -p&lt;/span&gt;
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[xxxxxxxx.dotcloud.com]:12428,[174.129.17.131]:12428&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
Enter password:
Welcome to the MySQL monitor.  Commands end with &lt;span class="p"&gt;;&lt;/span&gt; or &lt;span class="se"&gt;\g&lt;/span&gt;.
Your MySQL connection id is 34
Server version: 5.1.41-3ubuntu12.10-log &lt;span class="o"&gt;(&lt;/span&gt;Ubuntu&lt;span class="o"&gt;)&lt;/span&gt;

Type &lt;span class="s1"&gt;&amp;#39;help;&amp;#39;&lt;/span&gt; or &lt;span class="s1"&gt;&amp;#39;\h&amp;#39;&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; help. Type &lt;span class="s1"&gt;&amp;#39;\c&amp;#39;&lt;/span&gt; to clear the current input statement.

mysql&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;DBを作成します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql&amp;gt; CREATE DATABASE wordpress;
Query OK, 1 row affected (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ユーザを作成し、権限を与えます。 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql&amp;gt; GRANT ALL ON wordpress.* TO &amp;#39;dataich&amp;#39;@&amp;#39;%&amp;#39; IDENTIFIED BY &amp;#39;XXXXXXXXXX&amp;#39;;
Query OK, 0 rows affected (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;念のため &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql&amp;gt; FLUSH PRIVILEGES;
Query OK, 0 rows affected (0.00 sec)
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;では、データをロードします。 データをアップし &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud run wordpress.data &lt;span class="s2"&gt;&amp;quot;cat &amp;gt; data.sql&amp;quot;&lt;/span&gt; &amp;lt; ~/Desktop/mysql_wp.dump
&lt;span class="c"&gt;# cat &amp;gt; data.sql&lt;/span&gt;
Pseudo-terminal will not be allocated because stdin is not a terminal.
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[xxxxxxxx.dotcloud.com]:12428,[174.129.17.131]:12428&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;SSHログインし &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud ssh wordpress.data
&lt;span class="c"&gt;# $SHELL&lt;/span&gt;
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[xxxxxxxx.dotcloud.com]:12428,[174.129.17.131]:12428&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
mysql@wordpress-default-data-0:~&lt;span class="err"&gt;$&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ロードします。 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysql@wordpress-default-data-0:~$ mysql -u dataich -p wordpress &amp;lt; data.sql
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Wordpressソースの移行&lt;/h3&gt;
&lt;p&gt;アプリケーションのディレクトリにwwwというディレクトリを作り、そこにCORESEVERから持ってきたソースを置きます。&lt;/p&gt;
&lt;p&gt;DBの設定を行うため、wp-config.phpを編集します。
dotcloudでは/home/dotcloud/environment.jsonに各種サービスの設定が書かれます。それを読むようにしてあげればOKです。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vi blog.dataich.com/www/wp-config.php
&lt;/pre&gt;&lt;/div&gt;


&lt;script src="https://gist.github.com/1119568.js?file=wp-config.php"&gt;&lt;/script&gt;

&lt;h3&gt;nginxの設定&lt;/h3&gt;
&lt;p&gt;パーマリンク設定をp=123の形から変えている場合は、nginxの設定が必要になります。それにはnginx.confを置いてあげればOKです。 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vi blog.dataich.com/www/nginx.conf
&lt;/pre&gt;&lt;/div&gt;


&lt;script type="text/javascript" src="https://gist.github.com/1119570.js?file=nginx.conf"&gt;&lt;/script&gt;

&lt;h3&gt;wp-contentディレクトリの扱い&lt;/h3&gt;
&lt;p&gt;このままだと1回目以降にPushした際にwp-content以下が消えてしまいます。それではまずいので、すでにwp-contentディレクトリが存在する場合は何もしないようにpostinstallスクリプトを書いておきます。（dotcloudのヘルプそのまんま）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;vi blog.dataich.com/www/postinstall
&lt;/pre&gt;&lt;/div&gt;


&lt;script src="https://gist.github.com/1119572.js?file=postinstall"&gt;&lt;/script&gt;

&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chmod +x blog.dataich.com/www/postinstall
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;dotCloudへWordpressソースをPush&lt;/h3&gt;
&lt;p&gt;これで、動くはず！さあ、Push!!!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;dotcloud push wordpress blog.dataich.com
&lt;span class="c"&gt;# upload blog.dataich.com ssh://dotcloud@uploader.dotcloud.com:21122/wordpress&lt;/span&gt;
&lt;span class="c"&gt;# rsync&lt;/span&gt;
Pseudo-terminal will not be allocated because stdin is not a terminal.
Warning: Permanently added &lt;span class="s1"&gt;&amp;#39;[uploader.dotcloud.com]:21122,[184.73.14.49]:21122&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;RSA&lt;span class="o"&gt;)&lt;/span&gt; to the list of known hosts.
building file list ... &lt;span class="k"&gt;done&lt;/span&gt;
./
www/

..
..
..

www: http://xxxxxxxx.dotcloud.com/
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記、URLに正しくアクセスできました。&lt;/p&gt;
&lt;h3&gt;カスタムドメインの設定&lt;/h3&gt;
&lt;p&gt;まずはdotCloud側を設定します。aliasコマンドを使います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;dataich:~ dataich$ dotcloud alias add wordpress.www blog.dataich.com
Ok. Now please add the following DNS record:
blog.dataich.com. IN CNAME gateway.dotcloud.com.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;CNAMEでgateway.dotcloud.com.を設定するように言われるので、VALUE-DOMAIN側のドメイン設定を行います。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.dataich.com/"&gt;http://blog.dataich.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上記にアクセスし、動作確認。無事当ブログをdotCloudで動かすことに成功しました。
ざっと確認したところ問題なし。これで暫く運用テストしてみます。&lt;/p&gt;
&lt;p&gt;ここまでやっといてアレなのですが、そう負荷のない個人ブログを運用するにはちょっとお値段が辛いです。
もう少しリーズナブルなプランがあればいいのですが。。&lt;/p&gt;</summary></entry><entry><title>NAGASAKI-IT hands-on Spring 2011にてGitハンズオンやってきました</title><link href="http://blog.dataich.com/2011/05/28/git-handson-at-nagasaki-it-hands-on-spring-2011-report" rel="alternate"></link><updated>2011-05-28T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-05-28:2011/05/28/git-handson-at-nagasaki-it-hands-on-spring-2011-report</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://blog.dataich.com/2011/05/02/git-handson-at-nagasaki-it-hands-on-spring-2011/" title="NAGASAKI-IT hands-on Spring 2011にてGitハンズオンやります"&gt;NAGASAKI-IT hands-on Spring 2011にてGitハンズオンやります&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;エントリが遅くなってしまいました。久々人の前に立つということで少し緊張していましたが、おかげさまで無事に終了しました。今回は導入編ということでPush、Pull等の操作は行わず、コミットまでの流れ、ブランチの切り方等をハンズオンしました。&lt;/p&gt;
&lt;p&gt;準備していただいた皆様、ご参加くださった皆様ありがとうございました。飲み会も含め、とても楽しめた一日でした。&lt;/p&gt;
&lt;p&gt;次回（2011/6/18に決まりました）はGitHubを使ってPush、Pull等の操作を含めたハンズオンにしようかと計画しておりますので、是非よろしくお願い致します。&lt;/p&gt;
&lt;p&gt;&lt;img alt="飲み会でリベンジを果たした@_ec7のプレゼン。フスマにもちゃんと写ったのがすごい。" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/写真-2011-05-21-19-22-31.jpg" title="飲み会でリベンジを果たした@_ec7のプレゼン。フスマにもちゃんと写ったのがすごい。" /&gt; &lt;/p&gt;</summary></entry><entry><title>NAGASAKI-IT hands-on Spring 2011にてGitハンズオンやります</title><link href="http://blog.dataich.com/2011/05/02/git-handson-at-nagasaki-it-hands-on-spring-2011" rel="alternate"></link><updated>2011-05-02T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-05-02:2011/05/02/git-handson-at-nagasaki-it-hands-on-spring-2011</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://reiare.net/blog/2011/05/02/nagasaki-it-hands-spring-2011/"&gt;NAGASAKI-IT hands-on Spring 2011ってのやります！&lt;/a&gt;&lt;a href="http://reiare.net/blog/2011/05/02/nagasaki-it-hands-spring-2011/"&gt; &lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5/21に長崎市立図書館にてNAGASAKI-IT hands-on Spring 2011というイベントが開催されます。詳細は上記を参考にしていただきたいのですが、その中で「ひとりぎっと 〜ひとりで使うバージョン管理システム導入編〜」と称してGitのハンズオンをやらせていただくことになりました。&lt;/p&gt;
&lt;p&gt;私自身Gitの分散バージョン管理としてのメリットをもろに受けるようなシチュエーションにあまり出くわさないのですが、分散バージョン管理としてではなくともメリットがたくさんあり、ひとりでの開発時にも手放せないものとなっています。Subversionくらいなら使ってるという方や、そもそもバージョン管理やったことないという方でも理解頂けるような導入的な内容にしています。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://atnd.org/events/15375"&gt;ATND&lt;/a&gt;にて参加者様を募集してますので、興味のある方は是非ご参加ください。&lt;/p&gt;</summary></entry><entry><title>Xcodeでリリースビルド時に.dmgを自動生成する</title><link href="http://blog.dataich.com/2011/05/01/create-dmg-image-after-built-on-xcode" rel="alternate"></link><updated>2011-05-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-05-01:2011/05/01/create-dmg-image-after-built-on-xcode</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://qwan.org/2007/05/22/using-xcode-to-build-a-disk-image-and-upload-a-web-site/"&gt;Using Xcode to build a disk image (and upload a web site)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;こちらを参考に、hdiutilを使ってリリースビルド時のみ生成するようにしてみました。&lt;/p&gt;
&lt;p&gt;グループとファイルからビルドターゲットを右クリックし、[追加 &amp;gt; 新規ビルドフェーズ &amp;gt; 新規スクリプトを実行]を選択します。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/new-script.png"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/new-script.png" title="new-script" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;スクリプトを入力する画面が表示されますので、下記のようにスクリプトを設定します。.dmgはデスクに保存するようにしています。cpしているところは適時置き換えて頂ければいいかと思います。&lt;/p&gt;
&lt;script src="https://gist.github.com/950511.js?file=create_dmg.sh"&gt;&lt;/script&gt;</summary></entry><entry><title>MacアプリでURLをブラウザで開く方法</title><link href="http://blog.dataich.com/2011/05/01/open-url-with-browser-about-mac-app" rel="alternate"></link><updated>2011-05-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-05-01:2011/05/01/open-url-with-browser-about-mac-app</id><summary type="html">&lt;p&gt;これでHTTPなURLスキームに対応しているアプリのidentifierの一覧が取れます。
&lt;script src="https://gist.github.com/950532.js?file=gistfile1.m"&gt;&lt;/script&gt; &lt;/p&gt;
&lt;p&gt;ただ、このままだとブラウザでないアプリケーション（例えばEvernoteなど）も取れてしまいますので、うまい具合にブラウザだけ取る方法があれば教えてください。&lt;/p&gt;
&lt;p&gt;次にURLをデフォルトブラウザで開く方法
&lt;script src="https://gist.github.com/950533.js?file=gistfile1.m"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;最後にURLを指定のアプリケーションで開く方法
&lt;script src="https://gist.github.com/950534.js?file=gistfile1.m"&gt;&lt;/script&gt;&lt;/p&gt;</summary></entry><entry><title>「れいかい」第一回に参加してきました。</title><link href="http://blog.dataich.com/2011/04/05/attended-reikai" rel="alternate"></link><updated>2011-04-05T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-04-05:2011/04/05/attended-reikai</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://reiare.net/blog/2011/04/03/reikai-11-4/"&gt;例のあれ（仮題）- 定例会始めました。&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4月3日、&lt;a href="http://twitter.com/tactactad"&gt;@tactactad&lt;/a&gt;さんが主催された「れいかい」。ゆるーく集まろうという感じだったので、当日まで返事をせず行けそうだったら行こうと思っていて、途中から2時間ほど参加してきました。
各々好きなことをやる感じなんですが、僕はEmacsに再チャレンジというテーマ。&lt;a href="http://twitter.com/tactactad"&gt;@tactactad&lt;/a&gt;さんに手ほどきを受けたりしながら、軽くセットアップ済ませたり、キーバインドを復習したりなど。&lt;/p&gt;
&lt;p&gt;&lt;img alt="2階の中庭的なところで休憩中" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/1.png" title="2階の中庭的なところで休憩中" /&gt;&lt;/p&gt;
&lt;p&gt;その後も運良く飲み会にまで参加。&lt;/p&gt;
&lt;p&gt;&lt;img alt="@tactactadさんありがとう！。奥にいるのが@XXX_deguchiくん（会社アカみたいなんで伏せときます）" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/2.jpg" title="@tactactadさんありがとう！。奥にいるのが@XXX_deguchiくん（会社アカみたいなんで伏せときます）" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="@hideAki76さん、いい笑顔" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/3.png" title="@hideAki76さん、いい笑顔" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="左から@_ec7くん、@bamboo_insideさん" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/4.png" title="左から@_ec7くん、@bamboo_insideさん" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="焼き鳥。写真見てたらまた飲みたくなってきた。" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/5.jpg" title="焼き鳥。写真見てたらまた飲みたくなってきた。" /&gt;&lt;/p&gt;
&lt;p&gt;とても楽しく、モチベーションを上げてもらえた一日でした。準備その他もろもろありがとうございました。
次回も5月7日に開催予定みたいなので、タイミング合えば参加させて頂きます。&lt;/p&gt;
&lt;p&gt;P.S
顔伏せなくていーよという方は教えて下さい。次回からのポストが楽になるので。。&lt;/p&gt;</summary></entry><entry><title>Diibar - Diigoブックマーククライアントをリリースしました</title><link href="http://blog.dataich.com/2011/03/25/diibar-diigo-bookmark-client-is-released" rel="alternate"></link><updated>2011-03-25T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-03-25:2011/03/25/diibar-diigo-bookmark-client-is-released</id><summary type="html">&lt;p&gt;実は最近ブックマークをほとんど使っていなかったのですが、これじゃいかんということで凍結していたDeliciousアカウントを復活させたりしていたのですが、その過程でしった&lt;a href="http://www.diigo.com/"&gt;Diigo&lt;/a&gt;を気に入ってしまいましたのでMac用メニューバー常駐型クライアントを作りました。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/Diibar.png"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/Diibar.png" title="Diibar" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;機能としてはシンプルでDiigoのブックマークを同期し開くだけなのですが、個人的に特定のサイトはデフォルトでないブラウザで開きたかったりするので、開くブラウザを選ぶこともできるようにしました。自分のアカウントでしかテストしていないので、使ってもらってフィードバック頂けたら幸いです。今回は敢えてMac App Storeは選択しませんでした。&lt;a href="https://github.com/dataich/Diibar/downloads"&gt;こちら&lt;/a&gt;からパッケージをダウンロードすることができますのでよろしくお願いします。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ここからは開発者様向け&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;コードは&lt;a href="https://github.com/dataich/Diibar"&gt;Github&lt;/a&gt;にて修正BSDにて公開しています
下記に挙げている事を実装していますので参考になれば幸いです。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ブラウザ（というかHTTPなURL Schemeを持つアプリ）の一覧の取得、そこからのアプリ起動&lt;/li&gt;
&lt;li&gt;メニューバー常駐型アプリの作り方&lt;/li&gt;
&lt;li&gt;ログイン項目へ追加しアプリを自動起動する方法&lt;/li&gt;
&lt;li&gt;Dockに表示されないAgentタイプのアプリの作り方&lt;/li&gt;
&lt;li&gt;リリースビルド時に.dmgを自動生成するスクリプト&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;後、残念ながらアプリのメインアイコンがありません。Diigo使ってて我こそはというデザイナさんとかいませんかね、いませんよね。。。&lt;/p&gt;</summary></entry><entry><title>MacでPPTP（VPN）接続しつつ、通常の接続も行えるようにする方法</title><link href="http://blog.dataich.com/2011/02/26/pptp-and-normal-internet-with-same-time-on-mac" rel="alternate"></link><updated>2011-02-26T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-02-26:2011/02/26/pptp-and-normal-internet-with-same-time-on-mac</id><summary type="html">&lt;p&gt;&lt;a href="http://www.kuins.kyoto-u.ac.jp/KUINS3/pptp/macos/leopard_PPTP/"&gt;Mac OS X 10.5でPPTP接続する方法&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MacでPPTP使ってVPN接続するようになって、いろいろと面倒だったことが解決して良かった。
と思っていたのですが、PPTPの方の優先度を上げないといけない場合は、通常のインターネット接続が駄目になってしまうようです。
ローカルなネットワークにPPTPに繋ぎながら、普通にインターネットもしたいということで下記にて解決しました。&lt;/p&gt;
&lt;p&gt;方法としては、PPTPの優先度は通常のインターネット接続より下げておいて、特定のネットワークアクセスの場合のみPPTPインターフェースを使うようにしてあげればいいようです。VPNを接続した後、ターミナルで下記コマンドを実行すればOK。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/843881.js?file=gistfile1.eclass"&gt;&lt;/script&gt;

&lt;p&gt;ただ毎回ターミナル上げるのは面倒臭いです。 ちょっと調べると、PPTPが開始するときに実行されるスクリプト（&lt;a href="https://discussionsjapan.apple.com/thread/10088702"&gt;参考&lt;/a&gt;）があるじゃないですか。ということで&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/843881.js?file=gistfile2.eclass"&gt;&lt;/script&gt;

&lt;script src="https://gist.github.com/dataich/843881.js?file=ip-up"&gt;&lt;/script&gt;

&lt;p&gt;のような感じで、route add するスクリプトを書きました。&lt;/p&gt;
&lt;script src="https://gist.github.com/843881.js?file=gistfile4.eclass"&gt;&lt;/script&gt;

&lt;p&gt;するのをお忘れなく。&lt;/p&gt;
&lt;p&gt;もっと楽、シンプルな方法があったら教えてください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;追記&lt;/strong&gt;
誤解を招く書き方でしたが、VPN側にインターネット接続の制限が掛かってる場合の話です。
VPNにそういう制限がなかったら、こんな作業する必要はありません。&lt;/p&gt;</summary></entry><entry><title>SHOT NOTE 雑感</title><link href="http://blog.dataich.com/2011/02/20/about-shot-note" rel="alternate"></link><updated>2011-02-20T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2011-02-20:2011/02/20/about-shot-note</id><summary type="html">&lt;p&gt;流行ってますね、SHOT NOTE。
というわけで夢彩都の石丸文光堂さんにフラっと言ってみたら置いてありましたので買ってきました。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/SHOT-NOTE.jpg" title="SHOT NOTE" /&gt;&lt;/p&gt;
&lt;p&gt;一気にSMLサイズ全部揃えてみました。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/ROHDIA.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/ROHDIA.jpg" title="ROHDIA" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;はい、完全に読みが外れました。
RHODIAのメモ帳を入れてたケースに入れてみましたが、ものの見事にはみ出ちゃってます。。。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/SHOT-NOTE-APP.png"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/SHOT-NOTE-APP.png" title="SHOT NOTE APP" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;こんな感じで写真を撮って取り込みます。台形補正を自分でしなくていいのはなかなか楽です。
ただ、Evernoteにアップするまでの手順が多すぎてイケてません。アップしたいノートブックを覚えてくれなかったりするので、もう少し改善して頂きたいところ。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/S.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/S.jpg" title="S" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;まずはSサイズに書いてEvernoteにアップしてみました。
ちょっと方眼が小さくてきつめで、結構ぼやけちゃう感じです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/M.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/M.jpg" title="M" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次はMサイズ。そこそこメモも取りやすいサイズです。
もともと&lt;a href="http://itunes.apple.com/jp/app/jotnot-scanner/id307868751?mt=8"&gt;JotNot Scanner&lt;/a&gt;とか使っていたのですが、台形補正をしなくてもいいのがこんなに楽だったとは思いませんでした。
メモ上部にOCR読み取りのためのNo・日付欄があるのですが、 あんまり必要ないかなと思いました。
あると書かなければいけないような気がしてちょっと面倒です。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/L.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/L.jpg" title="L" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後にLサイズですが、やっぱり文字、図ともに書きやすいです。
サイズの違いは上記ノートの通り。&lt;/p&gt;
&lt;p&gt;数枚書いてみた雑感としては&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;たまにしかアップしないのなら書き慣れたメモ帳で書いて&lt;a href="http://itunes.apple.com/jp/app/jotnot-scanner/id307868751?mt=8"&gt;Jotnot Scanner&lt;/a&gt;とか使ったほうが良い&lt;/li&gt;
&lt;li&gt;マーカーでの補正が楽なので、全てのメモをEvernoteにアップするくらいの勢いで運用するなら購入する価値アリ&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;私としてはせっかく買ったので全てアップするつもりで運用してみようかなと思います。
書き物系では&lt;a href="http://blog.dataich.com/2010/01/20/livescribe-pulse-smartpen/"&gt;Livescribe&lt;/a&gt;があまりにも素晴らしかったので。正直あまり感動は無かったです、ごめんなさい。&lt;/p&gt;</summary></entry><entry><title>git init時に特定ディレクトリからhooksをコピーする</title><link href="http://blog.dataich.com/2010/12/05/git-init-template" rel="alternate"></link><updated>2010-12-05T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-12-05:2010/12/05/git-init-template</id><summary type="html">&lt;p&gt;Gitで自作したhooksをグローバルに使用するように設定できないかと調べてましたが無理っぽいです。&lt;/p&gt;
&lt;p&gt;代替案として、テンプレートディレクトリ（homebrewだと/usr/local/share/git-core/templates/）に用意したhooksを置いておけば、git init時にそこからコピーしてきてくれます。&lt;/p&gt;
&lt;p&gt;またシステム領域に自分のファイルを置きたくないとか、hooksを使いたくない場合もあると思います。
その場合は下記のようにgit initの--templateオプションを使用することで特定ディレクトリからhooksをコピーすることが可能です。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/729045.js?file=git-init-template"&gt;&lt;/script&gt;</summary></entry><entry><title>Gitで短すぎるコミットログを禁止する</title><link href="http://blog.dataich.com/2010/12/04/ban-on-too-short-commit-log-on-git" rel="alternate"></link><updated>2010-12-04T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-12-04:2010/12/04/ban-on-too-short-commit-log-on-git</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://d.hatena.ne.jp/kanu-orz/20100531/1275279046"&gt;コミットコメントを意地でも書かせたい&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上記を見て感化されたので、Gitで短すぎるコミットログのコミットを禁止するhookを書きました。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/728190.js?file=commit-msg"&gt;&lt;/script&gt;

&lt;p&gt;せっかくMacなのでsayコマンド使ってAlexさんにしゃべらせてます。
ちなみにコミットログはcommit-msgスクリプトの第一引数に.git/COMMIT_EDITMSGというファイル名が渡ってきますので、それを覗いてやれば参照できます。&lt;/p&gt;</summary></entry><entry><title>AppStoreのアプリレビュー一覧を直接開くURL</title><link href="http://blog.dataich.com/2010/08/26/url-to-appstore-review-list-page" rel="alternate"></link><updated>2010-08-26T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-08-26:2010/08/26/url-to-appstore-review-list-page</id><summary type="html">&lt;p&gt;AppStoreのアプリレビュー一覧を直接開くURLの書き方です。最後のidのところを変えればOKです。
下記は私のアプリのレビュー一覧のリンクです。（今日リリースしたばかりなのでレビュー0ですが、、、。）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;itms-apps://ax.itunes.apple.com/WebObjects/MZStore.woa/wa/viewContentsUserReviews?type=Purple+Software&amp;amp;id=386161424
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;公式な方法かどうかは定かでないのでお気を付けください。&lt;/p&gt;</summary></entry><entry><title>SuppApp - モバイルアプリユーザサポートサイトを手軽に作れる</title><link href="http://blog.dataich.com/2010/06/01/supp-app-mobile-app-user-support-site-was-released" rel="alternate"></link><updated>2010-06-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-06-01:2010/06/01/supp-app-mobile-app-user-support-site-was-released</id><summary type="html">&lt;p&gt;タイトルの通りなのですが、会社でSuppAppというサービスを立ち上げました。個人的な内容が入るので会社のブログではなく、こちらに書かせてもらいます。&lt;/p&gt;
&lt;p&gt;個人でiPhoneアプリをリリースした際にしているのですが、Appleにアプリを申請する際にサポートサイトのURLが必要になります。またアプリの紹介ページも必要になってきます。そこで私は下記のような作業を行いました。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;サポートサイトをgetsatisfaction.comで作成
非常に良くできたサイトで、一通りの機能は揃ってます。&lt;/li&gt;
&lt;li&gt;アプリの紹介ページを当ブログ内に作成&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://www.teehanlax.com/blog/2009/06/18/iphone-gui-psd-30/"&gt;iPhonePSD&lt;/a&gt;を使わせていただいて、iPhone端末画像にスクリーンショットをはめ込み（&lt;a href="http://blog.dataich.com/lang/en/iphone-app/easy-beat/"&gt;参照&lt;/a&gt;）
そして、現在とあるiPadアプリの開発を行っているのですが、リリース時にまた上記のような事をしなくてはいけないのかと思うと、少々面倒臭くなってきました。そこでこの一連の流れをモバイルアプリに特化してサービスにしてしまおうと考え、会社で業務としてやらせてもらうことになりました。&lt;/p&gt;
&lt;p&gt;登録は数分で済むと思いますので、是非皆様にも登録していただければ幸いです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://supp-app.com/"&gt;SuppApp&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>画面いっぱいのUITextViewがキーボードに隠れないようにする</title><link href="http://blog.dataich.com/2010/04/06/dont-want-hide-uitextview-behind-keyboard" rel="alternate"></link><updated>2010-04-06T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-04-06:2010/04/06/dont-want-hide-uitextview-behind-keyboard</id><summary type="html">&lt;p&gt;iPadで画面いっぱいにUITextViewを配置すると、入力状態になった際にキーボードが出てきて入力カーソルが隠れてしまいます。これには「キーボードが表示・非表示になるタイミングで、UITextViewの高さを変えてあげる」ことで対処可能です。&lt;/p&gt;
&lt;p&gt;UICatalogのサンプルが少し古く、3.2ではDeprecatedになっているUIKeyboardBoundsUserInfoKeyを使っていたため、UIKeyboardFrameEndUserInfoKeyを使うようにしてみました。恐らくiPhoneでも同じようにできるはずです。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/356516.js"&gt;&lt;/script&gt;</summary></entry><entry><title>Perlでインタラクティブシェル</title><link href="http://blog.dataich.com/2010/04/03/perl-interactive-shell" rel="alternate"></link><updated>2010-04-03T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-04-03:2010/04/03/perl-interactive-shell</id><summary type="html">&lt;p&gt;Ruby、Python等の言語にはインタラクティブシェルが付いてます。Perlでは&lt;a href="http://search.cpan.org/~dhouston/Devel-REPL-1.003009/lib/Devel/REPL.pm"&gt;Devel::REPL&lt;/a&gt;というモジュールをインストールすることで実現できます。（作者様には感謝です。）書くまでもないのですが、インストールにはcpanを使用します。（当方環境はMac OS X 10.6及び、Perl5.10）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo cpan
cpan&lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt;&amp;gt; install Devel::REPL
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;インタラクティブシェルの起動には下記Perlを実行します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;re.pl
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;後はコード書いてEnterを叩いていけば即座に実行されていきます。
ちょっとした実験したりするときに大変重宝します。&lt;/p&gt;</summary></entry><entry><title>Livescribe Pulse Smartpenが届いた</title><link href="http://blog.dataich.com/2010/01/20/livescribe-pulse-smartpen" rel="alternate"></link><updated>2010-01-20T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-01-20:2010/01/20/livescribe-pulse-smartpen</id><summary type="html">&lt;p&gt;Livescribe Pulse Smartpen（以後、Smartpen）とは、いわゆるデジタルペンの1つで、&lt;a href="http://www.livescribe.com/"&gt;Livescribe, Inc.&lt;/a&gt;より販売されています。&lt;/p&gt;
&lt;p&gt;デジタルペンには、書いたものの認識方法としていくつか種類があるのですが、これはアノト式を採用しています。アノト式とは、ドットペーパーと呼ばれる細かい点がたくさん印刷されている用紙と、ペン先についているカメラを使用して絶対座標を記録する方式です。&lt;/p&gt;
&lt;p&gt;Smartpenは日本国内では販売されておらず、Amazon.comで購入することになりました。日本国内で買えるデジタルペンとしては、&lt;a href="http://www.airpen.jp/"&gt;airpen&lt;/a&gt;、&lt;a href="http://www.mvpen.com/"&gt;MVPen&lt;/a&gt;などがありますが、わざわざ日本国内で買えないSmartpenにした決め手は下記の2点でした。&lt;/p&gt;
&lt;p&gt;1点目は、ボイスレコーダーです。ペンにボイスレコーダーが付いているものは多く出回っていると思いますが、Smartpenは書いているノートと録音した音声とがリンクします。例えば議事録などで「Smartpenについて」とノートに書いていたとします。ここどんな内容だったっけ？と思ったらペンでノートの「Smartpenについて」あたりをタップします。するとそのあたりで録音されていた音声がペンから再生されます。&lt;/p&gt;
&lt;p&gt;2点目は、App Storeです。LivescribeはSmartpen用のApp Storeを用意しており、好きなアプリをSmartpenにインストールすることができます。iPhoneのApp Storeと似ていて、第三者が開発、リリースすることが可能です。開発ライセンスを取得し、SDK（Java、Eclipse）を入手し、開発することが可能です。ただし、App Storeはまだ日本向けに公開されておらず、Billing Addressが向こうの住所じゃないと駄目なようです。待ち遠しいです。一応サンプルアプリとして、Piano、Translater Demoというものがインストールされていますので、試すことはできます。
特にこのPianoアプリは感動もので、ノートに鍵盤を書くとピアノになります。&lt;/p&gt;
&lt;p&gt;Smartpenの説明はここまでにして、ここからは購入レポートになります。今回購入したのは下記の3点です。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/B002DJV83Y/ref=ox_ya_os_product"&gt;Livescribe 2 GB Pulse Smartpen&lt;/a&gt;（$149.91）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/B001AALJ1I/ref=ox_ya_os_product"&gt;Livescribe Single Subject Spiral Notebook, 4-Pack, Nos. 1-4&lt;/a&gt;（$19.95）&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.amazon.com/gp/product/B001AAOZV4/ref=ox_ya_os_product"&gt;Livescribe ARA-000008 4 Medium Black and 1 Fine Red Ink Cartridge &lt;/a&gt;（$5.95）x 2
まずはパッケージから。これが1のセットです。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-package-outside.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-package-outside.jpg" title="livescribe-package-outside" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;中身はこんな感じです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-package-inside.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-package-inside.jpg" title="livescribe-package-inside" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2のノートのセット。4冊のセットを購入しました。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-notebooks.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-notebooks.jpg" title="livescribe-notebooks" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3のインクカートリッジ。ブラックx4、レッドx1が2セットで10本です。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-ink-cartridges.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-ink-cartridges.jpg" title="livescribe-ink-cartridges" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;セットの中身を紹介します。
これがSmartpen本体になります。ディスプレイ部にはバッテリー、時計その他のメニューが表示されます。内蔵スピーカー、内蔵マイクも付いています。やはりペンにしては重いですが、すぐに慣れました。頭の部分にはヘッドセットのジャックがあります。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-smartpen.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-smartpen.jpg" title="livescribe-smartpen" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;クレードルです。これにSmartpenを置くことで充電、Livescribe Desktopとの同期が可能になります。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-cradle-whole.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-cradle-whole.jpg" title="livescribe-cradle-whole" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;置いた状態がこんな感じです。接続は磁石式になっています。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-smartpen-on-cradle.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-smartpen-on-cradle.jpg" title="livescribe-smartpen-on-cradle" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ヘッドセットです。イヤフォンとしてはもちろんですが、イヤフォン背面にマイクが付いており、これを通して録音した場合は、なんと3D録音になります。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-headset.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-headset.jpg" title="livescribe-headset" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノートも1冊ついてきます。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-starter-notebook.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-starter-notebook.jpg" title="livescribe-starter-notebook" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;あとは、Smartpenのカバーと&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-case.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-case.jpg" title="livescribe-case" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;マニュアルが入っています。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-manual.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-manual.jpg" title="livescribe-manual" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;次にSmartpenの使用方法について&lt;/p&gt;
&lt;p&gt;ドットペーパーのノートは写真のようになっています。
拡大してもらえれば分かるのですが、ページ下部にいろいろなメニューが書いてあります。
これをペン先でタップすることで、録音したり、ペンの設定を変えたりすることができます。
左下にある十字キーのようなものを使って、Smartpenのディスプレイ部に表示されるメニューを選ぶことができます。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-dot-paper.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-dot-paper.jpg" title="livescribe-dot-paper" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ノートの裏表紙にも様々なツールがあります。計算機、バッテリーの確認、ディスプレイ輝度調整、ボリューム調整など。もちろんノートにボタンが埋め込まれているわけではなく、あくまでペン先のカメラとドットペーパーの座標で機能を認識します。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-notebook-back-cover.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-notebook-back-cover.jpg" title="livescribe-notebook-back-cover" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;新しいノートを使用する時には、ノートを閉じているテープ部分をペン先でタップします。これでSmartpenが新しいノートを認識するようです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-notebook-tap-point.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-notebook-tap-point.jpg" title="livescribe-notebook-tap-point" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;実はクレードルにも十字キーがあったので、押して見るとちゃんとメニューを操作できました。クレードルに付いている小さな穴はインクカートリッジを変えるときに使うようです。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-cradle-close-up.jpg"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-cradle-close-up.jpg" title="livescribe-cradle-close-up" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;これがLivescribe Desktopです。ノートをとって同期すると、このように取り込まれます。ベクターで取り込んでいるようで拡大しても荒れません。ノート部分を見てみると、色が違うところがあります。ここには音声が録音されているという意味でクリックすると再生されます。勘違いするといけないので言っておきますが、もちろん実ノートの該当部分をペン先でタップしても再生されます。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-desktop.png"&gt;&lt;img alt="" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/livescribe-desktop.png" title="livescribe-desktop" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;またLivescribe DesktopからはWEB上に用意されているスペース（容量制限有り）にアップすることで、共有することができます。PDFとしてダウンロードしたり、Facebookで共有したり、ブログ等にembedすることもできます。&lt;/p&gt;
&lt;div class="pencast"&gt;&lt;a href="http://www.livescribe.com/cgi-bin/WebObjects/LDApp.woa/wa/MLSOverviewPage?sid=jrfsQk41QQD0" target="_blank"&gt;About Livescribe Pulse Smartpen&lt;/a&gt;&lt;br /&gt;&lt;small&gt;brought to you by &lt;a href="http://www.livescribe.com/" target="_blank"&gt;Livescribe&lt;/a&gt;&lt;/small&gt;&lt;br /&gt;&lt;object width="228" height="316"&gt;&lt;param name="movie" value="http://www.livescribe.com/media/swf/embedPlayer.swf"&gt;&lt;/param&gt;&lt;param name="FlashVars" value="path=http%3A//www.livescribe.com/cgi-bin/WebObjects/LDApp.woa/wa/flashXML%3Fxml%3D0000C0A8011500003A9ACA1000000126443D282CEFD87E8A&amp;amp;embedversion=1"&gt;&lt;/param&gt;&lt;param name="allowFullScreen" value="true"&gt;&lt;/param&gt;&lt;param name="allowscriptaccess" value="always"&gt;&lt;/param&gt;&lt;embed src="http://www.livescribe.com/media/swf/embedPlayer.swf?path=http%3A//www.livescribe.com/cgi-bin/WebObjects/LDApp.woa/wa/flashXML%3Fxml%3D0000C0A8011500003A9ACA1000000126443D282CEFD87E8A&amp;amp;embedversion=1" type="application/x-shockwave-flash" allowscriptaccess="always" allowfullscreen="true" width="228" height="316"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;

&lt;p&gt;以上長々と雑文となってしまいましたが、あまりにも感動してしまったのでレポートさせていただきました。
まだまだこれからのツールだと思いますが、日本でも流行ってくれればと思っています。&lt;/p&gt;</summary></entry><entry><title>Gity - GitのGUIインターフェースの真打ち</title><link href="http://blog.dataich.com/2010/01/15/gity-git-gui-interface" rel="alternate"></link><updated>2010-01-15T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-01-15:2010/01/15/gity-git-gui-interface</id><summary type="html">&lt;p&gt;これまでGitのGUIインターフェースはフリーの&lt;a href="http://gitx.frim.nl/"&gt;GitX&lt;/a&gt;を使っていました。（gitkなどは見た目などが個人的に合いません。）
使えるコマンドがまだまだ少なかったりして、Terminalからのコマンドとの併用をしていました。
しかし有償ですが&lt;a href="http://macendeavor.com/gity"&gt;Gity&lt;/a&gt;という素晴らしい ソフトを発見したので、ご紹介します。&lt;/p&gt;
&lt;p&gt;まず、UIがシンプルで美しいです。第一印象大事です。
左メニューにはブランチ、リモートブランチ、タグ、リモートリポジトリの一覧があります。
&lt;a href="http://img.skitch.com/20100115-k7jni1cys7cutu3drx12qdtjt2.png"&gt;&lt;img alt="Gity" src="http://img.skitch.com/20100115-k7jni1cys7cutu3drx12qdtjt2.png" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使えるコマンドを見て行くと、、、結構充実してます。&lt;/p&gt;
&lt;p&gt;Statusメニュー
&lt;img alt="Status" src="http://img.skitch.com/20100115-r3u8kbxr8uiiijjqbc19h77e7w.png" /&gt;&lt;/p&gt;
&lt;p&gt;Actionsメニュー&lt;/p&gt;
&lt;p&gt;&lt;img alt="Actions" src="http://img.skitch.com/20100115-1r92n3wwnu91u28g15fh54s5td.png" /&gt;&lt;/p&gt;
&lt;p&gt;Repoメニュー
&lt;img alt="Repo" src="http://img.skitch.com/20100115-x3yi5ragaq96wpchqqrxgd4c7j.png" /&gt;&lt;/p&gt;
&lt;p&gt;Viewメニュー
&lt;img alt="View" src="http://img.skitch.com/20100115-jiuq77t45i9ca62n1saq6wyebc.png" /&gt;&lt;/p&gt;
&lt;p&gt;左メニューのブランチのコンテキストメニュー
&lt;img alt="System" src="http://img.skitch.com/20100115-rg23c1aitkke7hw176ukj2997w.png" /&gt;&lt;/p&gt;
&lt;p&gt;Textmateな人はBundleも用意されているもようです。
有償で$18（これは非常に手頃）ですが、いい選択肢になるのではないでしょうか。
まだ0.2.9.4978（2010/01/15時点）とバージョンも若く、コミット履歴の一覧が見れなかったり（下のアナウンスでは1月上旬に実装されるとのこと）しますが、次のアナウンスがありましたので楽しみです。&lt;/p&gt;
&lt;blockquote&gt;
&lt;h3&gt;History viewer (Early January 2010)&lt;/h3&gt;
&lt;p&gt;-This will include a list style history.
-View the commit details
-View the commit's tree&lt;/p&gt;
&lt;h3&gt;Advanced diff selector (Mid-Late January 2010)&lt;/h3&gt;
&lt;p&gt;-This is a view specifically for selecting commits, heads, tags, etc - to diff against each other.&lt;/p&gt;
&lt;h3&gt;Tree view for the "active branch" file list. (Late January)&lt;/h3&gt;
&lt;p&gt;-Currently there's only a "plain text" flat list style that shows file status' (modified, untracked, etc). There will be the option of showing a tree view like Finder.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;なんと、4月21日くらいにオープンソースとして&lt;/strong&gt;&lt;a href="http://github.com/beheadedmyway/gity"&gt;&lt;strong&gt;GitHub&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;にて公開されてました。併せてバイナリのほうもフリーになっています。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.gittiapp.com/"&gt;&lt;strong&gt;Gitti&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;というクライアントもまもなく登場するようです。こちらも楽しみ。&lt;/strong&gt;&lt;/p&gt;</summary></entry><entry><title>Pixelmatorでドロップシャドー、インナーシャドー、アウトラインフィルタなど</title><link href="http://blog.dataich.com/2010/01/07/pixelmator-drop-shadow-inner-shadow-outline" rel="alternate"></link><updated>2010-01-07T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2010-01-07:2010/01/07/pixelmator-drop-shadow-inner-shadow-outline</id><summary type="html">&lt;p&gt;PixelmatorではPhotoshopにあるようなドロップシャドー、インナーシャドー、アウトラインフィルタなどがデフォルトでは用意されていません。&lt;/p&gt;
&lt;p&gt;ちょっと調べるとQuarzコンポーザフィルタというのをそれぞれ追加することでできるようになるようです。
上記3つのフィルタはPixelmatorの&lt;a href="http://www.pixelmator.com/support/viewtopic.php?t=2489"&gt;フォーラム&lt;/a&gt;から入手できます。&lt;/p&gt;
&lt;p&gt;他にも&lt;a href="http://www.pixelmatorfilters.com/"&gt;ベベル&lt;/a&gt;や、&lt;a href="http://d.hatena.ne.jp/ke_takahashi/20081006/p2"&gt;ミニチュア模型風フィルタ&lt;/a&gt;なども公開してくださってる方がいらっしゃいますね。
感謝感謝です。&lt;/p&gt;</summary></entry><entry><title>2009年を個人的に振り返って</title><link href="http://blog.dataich.com/2009/12/31/looking-back-2009" rel="alternate"></link><updated>2009-12-31T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-12-31:2009/12/31/looking-back-2009</id><summary type="html">&lt;p&gt;2009年、ちょうど30歳になりました。&lt;/p&gt;
&lt;p&gt;この業界に入ったのが25の時、5年くらいでしょうか。&lt;/p&gt;
&lt;p&gt;情報を得るのは得意だと思っていました。
でも情報を発信するのはほとんどと言っていいほどしていませんでした。&lt;/p&gt;
&lt;p&gt;日頃からオープンソースにはとてもお世話になっていました。
30歳になった今年、いい加減何か世の中にコミットしなければと思い、&lt;a href="/quicksnippets/"&gt;QuickSnippets&lt;/a&gt;をオープンソースとして公開しました。&lt;/p&gt;
&lt;p&gt;またオープンソースとは別の話で、 何かお手製のプロダクトを世に出さねばという思いで、iPhoneアプリである&lt;a href="/iphone-app/easy-beat/"&gt;easy beat&lt;/a&gt;をリリースしました。&lt;/p&gt;
&lt;p&gt;ほんとに小さな小さな一歩ですが、踏み出すことができました。&lt;/p&gt;
&lt;p&gt;しかし上記をリリースするモチベーションを保てたのはいったい何だったのかと考えてみると、まさにTwitterだったと思います。
これを書いている現在で197名の方々をフォローさせていただいています。
その中には、雲の上の存在のような方、いろんな情報を発信されている方々がいらっしゃいます。
そういった方々が、「〇〇をリリースしたよ！」などとつぶやいていました。
それを見るたび、うらやましい気持ち、わくわくする気持ち、いろんな気持ちが沸き上がってきました。
それがリリースまでこぎつけたモチベーションを与えてくれたものでした。&lt;/p&gt;
&lt;p&gt;ということでTwitterで繋がっている皆様、そしてもちろん実世界でも刺激を与えてくださっている皆様に感謝しつつ、今年最後のエントリーとさせていただきます。&lt;/p&gt;</summary></entry><entry><title>easy beat (iPhone App)をリリースしました。</title><link href="http://blog.dataich.com/2009/12/27/easy-beat-iphone-app-was-released" rel="alternate"></link><updated>2009-12-27T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-12-27:2009/12/27/easy-beat-iphone-app-was-released</id><summary type="html">&lt;p&gt;アプリの詳細については&lt;a href="/iphone-app/easy-beat/"&gt;こちら&lt;/a&gt;を見ていただくとして、無事にリリースすることができました。
とりあえず今年の目標の１つであった、「iPhoneアプリをリリースする」 を達成することはできました。
アイデアが浮かべば、どんどんリリースしたいと思っています。&lt;/p&gt;</summary></entry><entry><title>QLColorCodeがバージョンアップ</title><link href="http://blog.dataich.com/2009/12/16/qlcolorcode-was-updated" rel="alternate"></link><updated>2009-12-16T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-12-16:2009/12/16/qlcolorcode-was-updated</id><summary type="html">&lt;p&gt;Quick Look用ソースコードハイライトプラグインの&lt;a href="http://code.google.com/p/qlcolorcode/"&gt;QLColorCode&lt;/a&gt;がいつの間にか2.0.2までバージョンが上がってました。多言語対応したようで、特に何もしなくても文字化けしません。
また、テーマ（背景色、カラーリング）とかも変えることができます。（前からできた？）
しかしXcode3.2を使ってると、下記プラグインとバッティングしてしまいます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/Developer/Applications/Xcode.app/Contents/Library/QuickLook/SourceCode.qlgenerator
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記をリネームしてやればいいだけなのですが、そのためのスクリプト（QLColorCodeScripts）も用意してくれています。&lt;/p&gt;
&lt;p&gt;作者様には感謝です。&lt;/p&gt;</summary></entry><entry><title>DTermが便利すぎる</title><link href="http://blog.dataich.com/2009/12/15/great-software-dterm" rel="alternate"></link><updated>2009-12-15T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-12-15:2009/12/15/great-software-dterm</id><summary type="html">&lt;p&gt;最近はソースのバージョン管理にGitを使っています、もちろんiPhoneアプリのソースにも。
でもXcodeから直接扱えるSCMにはGitが入っていないということで&lt;a href="http://stackoverflow.com/"&gt;stackoverflow&lt;/a&gt;で探してたところ&lt;a href="http://www.decimus.net/dterm.php"&gt;DTerm&lt;/a&gt;というのを発見。
マカーな人には常識なのかもしれないですが、ターミナルを支援してくれるすごく便利なソフトです。&lt;/p&gt;
&lt;p&gt;例えばXcode上で何かのソースを編集中にCommand+Shift+Enterを叩くと、下記のようなHUDなウィンドウが開きます。&lt;/p&gt;
&lt;p&gt;&lt;img alt="DTerm" src="http://img.skitch.com/20091215-fbuc8r5qfxrw62xi74jnjdk9gn.png" /&gt;&lt;/p&gt;
&lt;p&gt;何が便利なのかというと、上記ウィンドウを開いた時点で、編集中だったファイルのディレクトリがカレントになってくれているという件。
なのでこのまま git log とか、git statusとか場合によってはgitxってコマンドを叩いてやればいいのです。&lt;/p&gt;
&lt;p&gt;&lt;img alt="DTerm" src="http://img.skitch.com/20091215-qin37gy6gedjm7f7x3j7fg25f5.png" /&gt;&lt;/p&gt;
&lt;p&gt;さらに便利なのが、ウィンドウを開いた後にCommand+Shift+Vを叩くと、選択していたファイル名がペーストされるます。
もちろんFinderなんかで複数ファイル選択していた場合は、スペース区切りでペーストしてくれます。
これはいろいろと応用が効きそうです。&lt;/p&gt;
&lt;p&gt;ちなみにEnterでコマンドを実行するのですが、Command+Enterするとそのまま標準のTerminalを走らせることもできます。&lt;/p&gt;</summary></entry><entry><title>Unfuddleにプライベートリポジトリを作った</title><link href="http://blog.dataich.com/2009/12/10/created-private-repository-on-unfuddle" rel="alternate"></link><updated>2009-12-10T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-12-10:2009/12/10/created-private-repository-on-unfuddle</id><summary type="html">&lt;p&gt;この間申請したiPhoneアプリは、ローカルでGit使って管理していたんですが、
バックアップ目的で&lt;a href="http://unfuddle.com/"&gt;Unfuddle&lt;/a&gt;を使わせてもらうことにしました。&lt;/p&gt;
&lt;p&gt;Freeのプランで容量制限200M、プロジェクトは1つまでという制限はあるものの、作れるリポジトリ数に制限がなかったのが決め手でした。&lt;/p&gt;</summary></entry><entry><title>Irresistible（Wordpressテーマ）のバグ</title><link href="http://blog.dataich.com/2009/12/05/irresistible-wordpress-theme-bug" rel="alternate"></link><updated>2009-12-05T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-12-05:2009/12/05/irresistible-wordpress-theme-bug</id><summary type="html">&lt;p&gt;ブログのデザインを変えました。&lt;a href="http://www.woothemes.com/"&gt;WooThemes&lt;/a&gt;から&lt;a href="http://www.woothemes.com/2009/02/irresistible/"&gt;Irresistible&lt;/a&gt;を使わせていただきました。&lt;/p&gt;
&lt;p&gt;アーカイブでページャーが表示されないバグがあったので手直し。（「前へ」「次へ」が出ない）
archives.phpの41行目あたりのPHPコードの括弧の位置がおかしいので修正。
後の行が修正後。&lt;/p&gt;
&lt;script src="http://gist.github.com/249194.js"&gt;&lt;/script&gt;

&lt;p&gt;一応、連絡入れときました。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The WooThemes Teamの人から連絡があって、早速修正したバージョンをアップしたとのこと。
対応が早いです。&lt;/strong&gt;&lt;/p&gt;</summary></entry><entry><title>iPhone音楽系アプリベータテスタの募集</title><link href="http://blog.dataich.com/2009/11/30/iphone-music-application-beta-tester" rel="alternate"></link><updated>2009-11-30T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-11-30:2009/11/30/iphone-music-application-beta-tester</id><summary type="html">&lt;p&gt;タイトルそのままなのですが、音声の録音、再生を利用したiPhoneアプリケーションのベータテスタを募集します。&lt;/p&gt;
&lt;p&gt;詳細はベータテスタとなっていただいた後にお知らせしますので、是非ともよろしくお願い致します。&lt;/p&gt;
&lt;h2&gt;募集機種（iPhone OS 3.0以上かつ、下記に該当）&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;初代iPhone（国内で持ってる方は稀だとは思いますが、、、）&lt;/li&gt;
&lt;li&gt;iPhone 3G&lt;/li&gt;
&lt;li&gt;iPhone 3GS&lt;/li&gt;
&lt;li&gt;iPod touch 2nd（ただし、iPod touchに接続可能な外部マイクをお持ちであること。）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;特に、iPhone 3GS、iPod touchは是非ともお願いしたいところです。&lt;/p&gt;
&lt;h2&gt;募集人員&lt;/h2&gt;
&lt;p&gt;募集機種各2名ほど（完全に2名ずつと決めているわけではありません。）&lt;/p&gt;
&lt;h2&gt;応募条件&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Googleグループに参加可能であること。（メーリングリストのようなものです。）&lt;/li&gt;
&lt;li&gt;バグ報告等をきちんと行っていただけること。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;応募方法&lt;/h2&gt;
&lt;p&gt;下記アドレスに、「機種名、&lt;a href="http://blog.dataich.com/2009/11/30/iphone-udid/"&gt;UDID&lt;/a&gt;、Googleグループに参加できるメールアドレス、できればTwitterアカウント」をメールしてください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;taichiro.yoshida@gmail.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;テスタとして選ばせていただいた場合は、Googleグループからの招待メールを発行しますので詳細はその後お知らせ致します。
なお、頂いた情報は本件以外には使用せず、不必要になった場合は破棄することをお約束します。&lt;/p&gt;
&lt;h2&gt;テスト内容&lt;/h2&gt;
&lt;p&gt;普通に使っていただいてバグがあればGoogleグループにて報告していただくということになります。
たまに特定の操作をお願いすることもあるかもしれませんが、特に強制するものではありません。&lt;/p&gt;
&lt;h2&gt;特典&lt;/h2&gt;
&lt;p&gt;無事リリースできたあかつきにはプロモーションコード（無料でアプリをインストールできるもの）を発行させていただきます。
テストしていただいたアプリの正規版を無料で使えるようになります。
ただしプロモーションコードを使用するにはUSアカウントが必要になりますのでご注意ください。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;バグも収束し、無事Appleに提出できましたので締め切らせていただきます。
参加頂いた方々には、心より御礼申し上げます。&lt;/strong&gt;&lt;/p&gt;</summary></entry><entry><title>iPhone UDIDの取得</title><link href="http://blog.dataich.com/2009/11/30/iphone-udid" rel="alternate"></link><updated>2009-11-30T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-11-30:2009/11/30/iphone-udid</id><summary type="html">&lt;ol&gt;
&lt;li&gt;iTunesを起動（iPhoneを接続しておく）&lt;/li&gt;
&lt;li&gt;iTunesのデバイス（左メニュー）にiPhone、iPodが表示されたらクリック&lt;/li&gt;
&lt;li&gt;メイン画面にiPhoneの情報が表示されるので「概要」を表示&lt;/li&gt;
&lt;li&gt;シリアル番号のところをクリックすると識別子(UDID)が表示される&lt;/li&gt;
&lt;li&gt;そのままCtrl+Cでコピー（マウスドラッグで選択する必要はない、というかできない）&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>QuickSnippets 0.9.1 is released</title><link href="http://blog.dataich.com/2009/11/09/quicksnippets-0-9-1-release" rel="alternate"></link><updated>2009-11-09T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-11-09:2009/11/09/quicksnippets-0-9-1-release</id><summary type="html">&lt;p&gt;I improved &lt;a href="http://wiki.github.com/dataich/QuickSnippets/about-quicksnippets-2"&gt;QuickSnippets&lt;/a&gt; which I released some days ago.
It is working pretty well.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;QuickSnippets Regist&lt;/code&gt; as action shown up by searching &lt;code&gt;quick&lt;/code&gt;, and press enter. Then snippet's registration window will appear.&lt;/p&gt;
&lt;p&gt;&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"   codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"&gt;&lt;param name="quality" value="high" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="flashVars" value="thumb=http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/FirstFrame.jpg&amp;amp;containerwidth=593&amp;amp;containerheight=498&amp;amp;content=http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/00000010.swf&amp;amp;advseek=true" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;param name="scale" value="showall" /&gt;&lt;param name="allowScriptAccess" value="always" /&gt;&lt;param name="base" value="http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/" /&gt;&lt;param name="src" value="http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/jingswfplayer.swf" /&gt;&lt;param name="flashvars" value="thumb=http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/FirstFrame.jpg&amp;amp;containerwidth=593&amp;amp;containerheight=498&amp;amp;content=http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/00000010.swf&amp;amp;advseek=true" /&gt;&lt;param name="allowfullscreen" value="true" /&gt;&lt;embed type="application/x-shockwave-flash"   src="http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/jingswfplayer.swf" base="http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/" allowscriptaccess="always" scale="showall" allowfullscreen="true" flashvars="thumb=http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/FirstFrame.jpg&amp;amp;containerwidth=593&amp;amp;containerheight=498&amp;amp;content=http://content.screencast.com/users/dataich/folders/Jing/media/4314c441-b18d-4ccb-9e40-8d5822a9b386/00000010.swf&amp;amp;advseek=true" bgcolor="#FFFFFF" quality="high"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;
&lt;p&gt;I changed parent class of QuickSnippetsSource class HGSCallbackSearchSource to HGSMemorySearchSource.
It makes searching snippets be quickly.&lt;/p&gt;
&lt;p&gt;&lt;object classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000"   codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0"&gt;&lt;param name="quality" value="high" /&gt;&lt;param name="bgcolor" value="#FFFFFF" /&gt;&lt;param name="flashVars" value="thumb=http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/FirstFrame.jpg&amp;amp;containerwidth=559&amp;amp;containerheight=558&amp;amp;content=http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/00000009.swf&amp;amp;advseek=true" /&gt;&lt;param name="allowFullScreen" value="true" /&gt;&lt;param name="scale" value="showall" /&gt;&lt;param name="allowScriptAccess" value="always" /&gt;&lt;param name="base" value="http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/" /&gt;&lt;param name="src" value="http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/jingswfplayer.swf" /&gt;&lt;param name="flashvars" value="thumb=http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/FirstFrame.jpg&amp;amp;containerwidth=559&amp;amp;containerheight=558&amp;amp;content=http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/00000009.swf&amp;amp;advseek=true" /&gt;&lt;param name="allowfullscreen" value="true" /&gt;&lt;embed type="application/x-shockwave-flash"   src="http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/jingswfplayer.swf" base="http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/" allowscriptaccess="always" scale="showall" allowfullscreen="true" flashvars="thumb=http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/FirstFrame.jpg&amp;amp;containerwidth=559&amp;amp;containerheight=558&amp;amp;content=http://content.screencast.com/users/dataich/folders/Jing/media/bc354c53-52c8-474e-b3d6-a65845df9b00/00000009.swf&amp;amp;advseek=true" bgcolor="#FFFFFF" quality="high"&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/p&gt;</summary></entry><entry><title>Google Quick Search Box のプラグイン開発環境</title><link href="http://blog.dataich.com/2009/11/08/google-quick-search-box-plugin-development-setu" rel="alternate"></link><updated>2009-11-08T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-11-08:2009/11/08/google-quick-search-box-plugin-development-setu</id><summary type="html">&lt;p&gt;Google Quick Search Box（以下、QSB）のソースコードをチェックアウト
*チェックアウト先は私の環境に依存してます&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;svn checkout http://qsb-mac.googlecode.com/svn/trunk/ /Users/yoshida/Documents/workspace/Xcode/GoogleQuickSearchBox
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上記ディレクトリ/QSB/QSB.xcodeprojをXCodeで開いてビルドしておく。（必要じゃないかも）&lt;/p&gt;
&lt;p&gt;Google Codeの&lt;a href="http://code.google.com/p/qsb-mac/"&gt;qsb-mac&lt;/a&gt;プロジェクトから"GoogleQuickSearchBoxSDK-2.0.0.1447.Release.dmg"（2009/11/05時点）をダウンロードしてインストール&lt;/p&gt;
&lt;p&gt;XCodeの環境設定にてソースツリータブを開いて下記を追加&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;設定名&lt;/dt&gt;
&lt;dd&gt;QSBSRCROOT&lt;/dd&gt;
&lt;dt&gt;ディスプレイ名&lt;/dt&gt;
&lt;dd&gt;QSBSRCROOT&lt;/dd&gt;
&lt;dt&gt;パス&lt;/dt&gt;
&lt;dd&gt;/Users/yoshida/Documents/workspace/Xcode/GoogleQuickSearchBox/QuickSearchBox（絶対パスじゃないと駄目だった）&lt;/dd&gt;
&lt;dt&gt;設定名&lt;/dt&gt;
&lt;dd&gt;QSBBUILDROOT&lt;/dd&gt;
&lt;dt&gt;ディスプレイ名&lt;/dt&gt;
&lt;dd&gt;QSBBUILDROOT&lt;/dd&gt;
&lt;dt&gt;パス&lt;/dt&gt;
&lt;dd&gt;${QSBSRCROOT}/QSB/build/Debug&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;設定を確認するため、テンプレートプロジェクトをビルドしてみる。
Xcodeを開いて新規プロジェクトにて、QSBテンプレートとしてQSBAppleScriptPlugin、QSBPlugin、QSBPythonPluginが追加されているので、今回はQSBPluginを選択。プロジェクト名は適当に。
「ビルド&amp;amp;ビルドと実行」をやってみて、動けば設定完了。&lt;/p&gt;
&lt;p&gt;まだ、このままではプラグインのデバッグができなかった。
プロジェクトをビルドすると、ProductsグループにExample.hgsというプラグインバイナリができているが、これをQSBが読み込んでくれない。
QSBは&lt;code&gt;~/Library/Application Support/Google/Quick Search Box/PlugIns&lt;/code&gt;からプラグインを読み込んでくれるので、symlinkをはってやればOK。&lt;/p&gt;
&lt;p&gt;*もっとスマートな方法がありましたら、コメント頂けると助かります。&lt;/p&gt;</summary></entry><entry><title>QuickSnippets（Google Quick Search Box用プラグイン）を公開しました</title><link href="http://blog.dataich.com/2009/11/08/quicksnippets-release" rel="alternate"></link><updated>2009-11-08T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-11-08:2009/11/08/quicksnippets-release</id><summary type="html">&lt;p&gt;Google Quick Search Boxでテキストスニペットを使えるようにするプラグイン QuickSnippets を公開しました。&lt;/p&gt;
&lt;p&gt;iPhone開発でObjective-Cを覚えたての私が突貫で作ったこともあり、まだまだ発展途上ですので使いにくい部分も多々ありますが、twitterなり、コメントなりでご要望いただけると幸いです。
アップデート情報もtwitterで流すと思いますので、フォロー頂けるといいかもしれません。&lt;/p&gt;
&lt;p&gt;また、せっかくプラグインの書き方を覚えたので、「QSBでこんなプラグインがあったら」などのご要望ありましたら面白いと思ったら作りますのでお知らせください。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="/quicksnippets/"&gt;QuickSnippetsのダウンロード&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://wiki.github.com/dataich/QuickSnippets"&gt;QuickSnippetsのインストール、使用方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;また、ソースコードはオープンソースとして&lt;a href="http://github.com/dataich/QuickSnippets"&gt;Github&lt;/a&gt;にてMITライセンスにて公開しています。&lt;/p&gt;</summary></entry><entry><title>Tweetie 2.0 Tips</title><link href="http://blog.dataich.com/2009/10/23/tweetie-2-0-tips" rel="alternate"></link><updated>2009-10-23T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-10-23:2009/10/23/tweetie-2-0-tips</id><summary type="html">&lt;p&gt;Tweetie 2.0のTipsページがあった。
いろいろと便利なことが書いてあるので一読されることをオススメする。
その中からいくつか抜粋。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;タブバーのDMアイコンをダブルタップで全てのPOSTを既読&lt;/li&gt;
&lt;li&gt;Saved Searchは本家Twitterと同期される&lt;/li&gt;
&lt;li&gt;ステータスバーの時計タップで一番上に移動&lt;/li&gt;
&lt;li&gt;@replyビューで下スワイプで元POSTを表示&lt;/li&gt;
&lt;li&gt;ナビゲーションバーで「一つ前のビューに戻るボタン（左上）」から右スワイプすると深い階層からでも一気に最初のビューまで戻れる（これは嬉しい）&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://help.atebits.com/tweetie-iphone/"&gt;Tweetie 2.0 Help&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Balsamiq Mockups For Desktop</title><link href="http://blog.dataich.com/2009/08/27/balsamiq-mockups-for-desktop" rel="alternate"></link><updated>2009-08-27T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-08-27:2009/08/27/balsamiq-mockups-for-desktop</id><summary type="html">&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/Balsamiq-Mockups-For-Desktop.png"&gt;&lt;img alt="Balsamiq Mockups For Desktop" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/Balsamiq-Mockups-For-Desktop.png" title="Balsamiq Mockups For Desktop" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.balsamiq.com/products/mockups"&gt;Balsamiq Mockups For Desktop&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;WEBページのデザイン・構成を考えたり、誰かに見せたい時にラフスケッチされる方も多いと思う。
これまで私はあまり絵が得意でないので、ざっとHTMLコーディングしていた。
しかしもう少し楽にならないものかと考えてモックアップツールを探して見つけたのが79ドルのこれ。&lt;/p&gt;
&lt;p&gt;WEBページに必要な手書きパーツが多く用意されていて、ドラッグしていくだけ。
サイズを広げたりするのも自由自在。
基本的なパーツはダブルクリックで入力エリアが出てくるのでタイトルを設定したりもできる。
テーブルパーツでは下記のようにカンマ、改行を入れることでデータを入れることができる。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dl.dropbox.com/u/126064/blog.dataich.com.images/Balsamiq-Mockups-For-Desktop-Editing-Table-Data.png"&gt;&lt;img alt="Balsamiq Mockups For Desktop Editing Table Data" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/Balsamiq-Mockups-For-Desktop-Editing-Table-Data.png" title="Balsamiq Mockups For Desktop Editing Table Data" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ボタンやリンクパーツには遷移先ページを設定することができ、全画面プレビュー時に動かすことができる。
これはちょっとしてプレゼンなんかで使えるかもしれない。
他にも作成したモックアップからFlexアプリケーションを生成する仕組みもある。（ここのところはもう少し詳しくアップしたい）&lt;/p&gt;
&lt;p&gt;また、他のユーザが作成したパーツ群を&lt;a href="http://www.mockupstogo.net/"&gt;サイト&lt;/a&gt;からダウンロードして追加することもできる。
残念なのはコンポーネントとして恒久的に取り込めるわけではなく、
ダウンロードしたモックアップからパーツをコピペする必要があること。
ここは改善していただけるとありがたい。&lt;/p&gt;
&lt;p&gt;ソフトウェアの説明はここまでとして、デフォルトの状態だと手書きフォントが英字しか対応していない。
日本語でも手書き風にしたいのであれば、手書きフォントをインストールして設定する必要がある。
手書きフォントは「あくあフォント」が有名だが、私は「&lt;a href="http://hp.vector.co.jp/authors/VA039499/#hui"&gt;ふい字&lt;/a&gt;」を使わせていただいている。（フリーで商用利用も可とのこと、ありがとうございます。）
フォントのインストールの説明は省略して、Balsamiq Mockupsへの設定方法は下記の通り。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#Local Store以下が存在しない場合は作成する
~/Library/Preferences/BalsamiqMockupsForDesktop.ランダム文字列/Local\ Store/BalsamiqMockups.cfg
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;config&amp;gt;&lt;/span&gt;
    &lt;span class="c"&gt;&amp;lt;!--フォント名--&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;fontFace&amp;gt;&lt;/span&gt;HuiFontP&lt;span class="nt"&gt;&amp;lt;/fontFace&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/config&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Google Quick Search BoxでDelicious</title><link href="http://blog.dataich.com/2009/07/01/google-quick-search-box-delicious" rel="alternate"></link><updated>2009-07-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-07-01:2009/07/01/google-quick-search-box-delicious</id><summary type="html">&lt;p&gt;作ろうかと思っていた矢先に発見してしまったので。
Google Quick Search Boxにて設定したアカウントのDeliciousのブックマークをタグ、タイトルにて検索してくれるプラグイン。
&lt;code&gt;~/Library/Application Support/Google/Quick Search Box/PlugIns&lt;/code&gt;に置くだけ。
作者様には感謝です。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://nparry.com/qsb_delicious_plugin/" title="Delicious Plugin"&gt;Delicious Plugin&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>array_filter - PHPの配列で条件に当てはまる要素を取り出す</title><link href="http://blog.dataich.com/2009/03/31/array-filter-php" rel="alternate"></link><updated>2009-03-31T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-03-31:2009/03/31/array-filter-php</id><summary type="html">&lt;p&gt;DBから取って来た結果から、特定条件に当てはまる要素のみ取り出したかったので。
具体的にはフィルタリングするためのコールバック関数を作って、array_filterを実行します。&lt;/p&gt;
&lt;p&gt;例）男性であるレコードのみ取り出す場合&lt;/p&gt;
&lt;script src="http://gist.github.com/249007.js"&gt;&lt;/script&gt;

&lt;ol&gt;
&lt;li&gt;create_functionでコールバック関数を作成します。create_functionでなくとも普通にfunction作っても構わないのですが、フィルタリングする為の条件を動的に変えたい場合などに有効です。1番目の引数$recordは配列の各要素になります。ここでの変数名は何でも構いません。2番目の引数がコールバック関数の実際の処理部になります。ここでtrueが返る要素のみ取り出されます。&lt;/li&gt;
&lt;li&gt;フィルタリングする配列、コールバック関数を引数にし、array_filterにて実際に要素をフィルタリングしています。その結果を$male_onlyに代入します。
結果&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Array
    (
        [0] =&amp;gt; Array
            (
                [name] =&amp;gt; 田中　太郎
                [sex] =&amp;gt; 1
            )   
        [2] =&amp;gt; Array
            (
                [name] =&amp;gt; 鈴木　太郎
                [sex] =&amp;gt; 1
            )   
    )
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;*添字が元のままであることに注意&lt;/p&gt;</summary></entry><entry><title>WordPressを設置した</title><link href="http://blog.dataich.com/2009/01/11/setup-wordpress" rel="alternate"></link><updated>2009-01-11T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-01-11:2009/01/11/setup-wordpress</id><summary type="html">&lt;p&gt;2.7がでて急にやりたい欲求が湧いてきたので、
レンタルサーバ（coreserver）契約して設置し、はてなダイアリーから移行。
テーマ探し中。&lt;/p&gt;</summary></entry><entry><title>今年の目標</title><link href="http://blog.dataich.com/2009/01/01/target-2009" rel="alternate"></link><updated>2009-01-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2009-01-01:2009/01/01/target-2009</id><summary type="html">&lt;ul&gt;
&lt;li&gt;印刷を減らす&lt;/li&gt;
&lt;li&gt;浅く広く、一つは深く&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>ただTitaniumチュートリアルをやってみただけだがエラーが出たので、ここに書いた</title><link href="http://blog.dataich.com/2008/12/12/titanium-tutorial-error" rel="alternate"></link><updated>2008-12-12T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-12-12:2008/12/12/titanium-tutorial-error</id><summary type="html">&lt;h2&gt;開発環境&lt;/h2&gt;
&lt;p&gt;Appcelerator SDKとTitanium SDKをインストール&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://appcelerator.org/download"&gt;Appcelerator Product Downloads&lt;/a&gt;&lt;br /&gt;
&lt;a href="http://titaniumapp.com/download"&gt;Appcelerator Titanium SDK Downloads&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;チュートリアってみる。&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://titaniumapp.com/documentation/starting-your-first-titanium-project"&gt;Starting your first Titanium project&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上記を参考に進めてみた。&lt;/p&gt;
&lt;h4&gt;プロジェクト生成&lt;/h4&gt;
&lt;p&gt;Terminalから&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;app create:project . myproject titanium
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下記のように出力されればプロジェクト生成成功。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Using service titanium
Connecting to update server ...
Fetching release info from distribution server...
Your project was created in /Users/yourname/myproject
Appcelerator titanium project created ... Code strong!
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにSDKのインストールに失敗したのか、最初はうまくいかなかった。
再インストールしたらうまくいった。&lt;/p&gt;
&lt;h4&gt;プロジェクト（アプリケーション）のパッケージング&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;myproject
&lt;span class="nv"&gt;$ &lt;/span&gt;app package:project osx &lt;span class="c"&gt;#Windows向けの場合はwin32&lt;/span&gt;
Create directory &lt;span class="o"&gt;[&lt;/span&gt;/Users/yoshida/Work/temp/myproject/stage&lt;span class="o"&gt;]&lt;/span&gt;? &lt;span class="o"&gt;(&lt;/span&gt;Y&lt;span class="o"&gt;)&lt;/span&gt;es,&lt;span class="o"&gt;(&lt;/span&gt;N&lt;span class="o"&gt;)&lt;/span&gt;o,&lt;span class="o"&gt;(&lt;/span&gt;A&lt;span class="o"&gt;)&lt;/span&gt;ll &lt;span class="o"&gt;[&lt;/span&gt;Y&lt;span class="o"&gt;]&lt;/span&gt; Y
Connecting to update server ...
Fetching release info from distribution server...
&lt;span class="o"&gt;(&lt;/span&gt;1/1&lt;span class="o"&gt;)&lt;/span&gt; titanium:osx: 0% &lt;span class="p"&gt;|&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;1/1&lt;span class="o"&gt;)&lt;/span&gt; titanium:osx: 1% &lt;span class="p"&gt;|&lt;/span&gt;
...
&lt;span class="o"&gt;(&lt;/span&gt;1/1&lt;span class="o"&gt;)&lt;/span&gt; titanium:osx: 100% &lt;span class="p"&gt;|&lt;/span&gt;ooooooooooooooooooooooooooooooooooooooooooooooooooooo&lt;span class="p"&gt;|&lt;/span&gt; 5.4MB 302.5KB/s ETA: 00:00:00

Installed titanium:osx 0.1
Packaging Titanium &lt;span class="k"&gt;for&lt;/span&gt; target os: osx
Validating tiapp.xml ...
Looks good ... Let&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;s packager up!
Your Titanium application is located in /Users/yoshida/Work/temp/myproject/stage
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これで/Users/yoshida/Work/temp/myproject/stageにmyproject.appとしてパッケージングされる。
myproject.appを起動した。&lt;/p&gt;
&lt;p&gt;なんかエラーが出るが、&lt;/p&gt;
&lt;p&gt;&lt;img alt="titanium_error" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/titanium_error.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;無視してクリックするとウィンドウが表示された。&lt;/p&gt;
&lt;p&gt;&lt;img alt="titanium_sample" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/titanium_sample.jpg" /&gt;&lt;/p&gt;
&lt;p&gt;Javascript APIを使ったサンプルがコード付きで試せるので、いろいろと見てみよう。
但し、上記エラーのせいか、ボタンクリック系のサンプルが動かない、、、&lt;/p&gt;</summary></entry><entry><title>svn+mercurial</title><link href="http://blog.dataich.com/2008/12/01/svnmercurial" rel="alternate"></link><updated>2008-12-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-12-01:2008/12/01/svnmercurial</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://pypi.python.org/pypi/hgsvn"&gt;Python Package Index : hgsvn 0.1.6&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;既存のsvnリポジトリがあって、ローカルでもコミットしたかったので。&lt;/p&gt;
&lt;p&gt;Leopardで使うためには、こうやる。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;#必要なパッケージのインストール
$ sudo port install subversion
$ sudo port install mercurial
$ sudo port install py-svn

#hgsvnソースを取得
$ hg clone http://hg.pitrou.net/public/hgsvn/main hgsvn

#hgsvnインストール
$ sudo easy_install -s /opt/local/bin hgsvn

#既存のsvnリポジトリからソースを取得
$ hgimportsvn http://localhost/svnrepos
$ cd svnrepos
$ hgpullsvn

#hgローカルリポジトリへのコミット
$ hg commit

#svnリポジトリから更新
$ hgpullsvn

#svnリポジトリへコミット
$ hgpushsvn
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;ちなみにpython2.5がデフォルトpythonだとhgpushsvnがこけます。
py-svnがそのままだとpython2.4のsite-packagesにインストールされるようで、
py-svnが見つからないとか言われます。
解決するのが面倒そうだったので下記のようにしてpython2.4に切り替えてます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;sudo port install python_select
&lt;span class="nv"&gt;$ &lt;/span&gt;sudo python_select python24
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>VirtualBox2でMacでのブリッジ接続</title><link href="http://blog.dataich.com/2008/10/20/bridge-internet-on-mac-virtualbox" rel="alternate"></link><updated>2008-10-20T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-10-20:2008/10/20/bridge-internet-on-mac-virtualbox</id><summary type="html">&lt;p&gt;VirtualBox2がリリースされ、遂に、Mac版もブリッジ接続対応した。
これでホストとゲストを同ネットワークにすることができる。
&lt;a href="http://www.virtualbox.org/"&gt;VirtualBox&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;アップルメニュー&amp;gt;システム環境設定&amp;gt;共有&amp;gt;インターネット共有にて&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;共有する接続経路を実際にネットに繋がってるインターフェース、相手のコンピュータが使用するポートをEthernetにする。&lt;/li&gt;
&lt;li&gt;インターネット共有をオン&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;VirtualBoxの仮想マシンのネットワーク設定にて&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;割り当てをホストインターフェースに設定&lt;/li&gt;
&lt;li&gt;ホストインターフェースをEthernetに設定
たったこれだけ。
いやー、便利になりました。&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>ハイパフォーマンスWEBサイト</title><link href="http://blog.dataich.com/2008/08/29/high-performance-website" rel="alternate"></link><updated>2008-08-29T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-08-29:2008/08/29/high-performance-website</id><summary type="html">&lt;p&gt;市立図書館にふらっと寄ったらあったので、通勤バスの中で読んだ。&lt;/p&gt;
&lt;p&gt;要はフロントエンドでWEBのパフォーマンスをぐぐっとあげようという本。
１４だったか１５のルールでまとめられてて、うなってしまった。
WEB開発者の方には必須の良書だと思う。是非実践してみたいことばかりが書かれていた。
Javascriptはページ下部に書こうとか、Expire使おうよとか、CSSインライン画像使おうよとか、いろいろ。&lt;/p&gt;
&lt;p&gt;読み切りやすい薄さで値段も手頃。&lt;/p&gt;
&lt;iframe src="http://rcm-jp.amazon.co.jp/e/cm?t=dataich-22&amp;o=9&amp;p=8&amp;l=as1&amp;asins=487311361X&amp;fc1=000000&amp;IS2=1&amp;lt1=_blank&amp;m=amazon&amp;lc1=0000FF&amp;bc1=000000&amp;bg1=FFFFFF&amp;f=ifr" style="width:120px;height:240px;" scrolling="no" margin margin frameborder="0"&gt;&lt;/iframe&gt;</summary></entry><entry><title>Javacomm長崎 第1回セミナーのお知らせ</title><link href="http://blog.dataich.com/2008/08/19/javacomm-nagasaki-seminar-1" rel="alternate"></link><updated>2008-08-19T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-08-19:2008/08/19/javacomm-nagasaki-seminar-1</id><summary type="html">&lt;p&gt;下記内容でやります。私は「Tomcat with Cometでチャットアプリ」とかやる予定です。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RubyやPython、PHPなどLL系言語が活発な昨今ですが、JavaはJRubyやJythonの実装にも使われており、そのVMを通じて色々な言語をつなぐグルー的な役割も担っています。&lt;/p&gt;
&lt;p&gt;現在ではJava SE 6がリリースされ、速度的にもかなり改善されておりNetBeans, Eclipse等の大変使いやすい開発環境も利用されています。&lt;/p&gt;
&lt;p&gt;開発の現場ではSeasar2など使いやすいフレームワークによって、しっかりとしたアプリケーションの構築にも用いられています。Javaのことをもっと知ってみませんか？
&lt;table border="0"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;開催日&lt;/th&gt;
&lt;td&gt;008/08/23（土曜日）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;場所&lt;/th&gt;
&lt;td&gt;出島交流会館 9F&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;時間&lt;/th&gt;
&lt;td&gt;13:00～&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;th&gt;参加費&lt;/th&gt;
&lt;td&gt;無料（懇親会を除く）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Javaでインストーラ（面倒な環境構築を1発でインストール！）&lt;/li&gt;
&lt;li&gt;Proce55ing関連&lt;/li&gt;
&lt;li&gt;Tomcat with Cometでチャットアプリ&lt;/li&gt;
&lt;li&gt;Java/Swingでシューティングゲーム&lt;/li&gt;
&lt;li&gt;いまさらDIコンテナ -Seasar2-&lt;/li&gt;
&lt;li&gt;BlazeDSをたしなむ&lt;/li&gt;
&lt;li&gt;他
※順番は変更になる場合があります&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;詳細、申込は&lt;a href="http://sites.google.com/site/javacommnaga/Accounce/javacomm%E9%95%B7%E5%B4%8E-%E7%AC%AC1%E5%9B%9E%E3%82%BB%E3%83%9F%E3%83%8A%E3%83%BC%E3%81%AE%E3%81%8A%E7%9F%A5%E3%82%89%E3%81%9B"&gt;こちら&lt;/a&gt;からどうぞ。&lt;/p&gt;
&lt;/blockquote&gt;</summary></entry><entry><title>Failed to release SSL session cache lock</title><link href="http://blog.dataich.com/2008/07/29/failed-to-release-ssl-session-cache-lock" rel="alternate"></link><updated>2008-07-29T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-07-29:2008/07/29/failed-to-release-ssl-session-cache-lock</id><summary type="html">&lt;p&gt;/var/log/httpd/ssl_error.logを見ると下記エラーが多発していた。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;[warn] (13)Permission denied: Failed to release SSL session cache lock
[warn] (13)Permission denied: Failed to acquire SSL session cache lock
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;/etc/httpd/conf/httpd.confを見てみるとApacheの実行ユーザがnobodyになっているのに対し、sslのキャッシュディレクトリである/var/cache/mod_sslの所有者がデフォルトのapache:rootのままだった、、、。
こいつを nobody:rootに変えてやって、Apache再起動で解決。&lt;/p&gt;</summary></entry><entry><title>Adobe Airでtwitterタイムラインを取得してみよう。</title><link href="http://blog.dataich.com/2008/07/01/twitter-timeline-by-adobe-air" rel="alternate"></link><updated>2008-07-01T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-07-01:2008/07/01/twitter-timeline-by-adobe-air</id><summary type="html">&lt;h4&gt;前提条件&lt;/h4&gt;
&lt;p&gt;Adobe Flex Builder3がインストール済みであること。（Eclipseプラグインでも可）&lt;/p&gt;
&lt;p&gt;※ダウンロード、インストール方法については、下記Adobeサイトを参照してください。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.adobe.com/jp/products/flex/"&gt;Adobe - Flex 3&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Flex Builder（または、Eclipse）上でのプロジェクト作成&lt;/h4&gt;
&lt;p&gt;1.File &amp;gt; New &amp;gt; Flex Project（見つからない場合は、Otherより探してください。）を選択。&lt;/p&gt;
&lt;p&gt;2.プロジェクト名を'twitter'（任意）とし、アプリケーションの種類を'デスクトップアプリケーション（Adobe Air...）'としてFinishを選択。これで下記構成プロジェクトが作成されます。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;twitter
├── bin-debug
├── libs
└── src
    ├── twitter-app.xml
    └── twitter.xml
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;ひとまず、Airアプリケーションを実行してみましょう。&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;プロジェクト'twitter'を右クリック &amp;gt; Run As &amp;gt; Adobe Air アプリケーションを選択。&lt;/li&gt;
&lt;li&gt;別画面でAirアプリケーションが起動するはずです。もちろんまだ何もコーディングしていませんので、何も無いウィンドウが表示されるだけです。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;twitterのタイムラインを表示するための画面コンポーネントの作成&lt;/h4&gt;
&lt;p&gt;twitterのタイムラインを表示するためのコンポーネントとして、ここではmx:DataGridコンポーネントを使用します。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;twitter.mxmlをダブルクリックし、エディターに表示させ、デザインタブをクリック。&lt;/li&gt;
&lt;li&gt;コンポーネントビューのコントロール/DataGridコンポーネントをデザインエディタにドラッグ。&lt;/li&gt;
&lt;li&gt;Airアプリケーションを実行して、確認してください。何もなかったウィンドウにDataGridが表示されてます。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;twitter apiを使用してタイムラインを取得する。&lt;/h4&gt;
&lt;p&gt;1.まずは、twitterのAPIと通信を行うための、mx:HTTPServiceを作成します。&lt;/p&gt;
&lt;p&gt;twitter.mxmlをダブルクリックし、エディターに表示させ、ソースタブをクリック。mx:WindowedApplicationタグ内に、下記を追加します。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&amp;lt;mx:HTTPService
  id=&amp;quot;twitter_timeline&amp;quot;
  url=&amp;quot;http://twitter.com/statuses/public_timeline.xml&amp;quot;/&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.アプリケーション開始時に、このHTTPServiceで通信するよう、mx:WindowedApplicationのcreationCompleteイベント属性に、'twitter_timeline.send()'と記述します。&lt;/p&gt;
&lt;p&gt;3.ここまでで、下記のようになるかと思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;mx:WindowedApplication&lt;/span&gt; &lt;span class="na"&gt;xmlns:mx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.adobe.com/2006/mxml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;layout=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;absolute&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;creationComplete=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter_timeline.send()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;mx:HTTPService&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter_timeline&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://twitter.com/statuses/public_timeline.xml&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

    ...省略

&lt;span class="nt"&gt;&amp;lt;/mx:WindowedApplication&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4.次に、取得したタイムラインを最初に作成したDataGridに表示させます。&lt;/p&gt;
&lt;p&gt;twitterのタイムラインAPIからは、XMLが取得できます。どういうXMLが取得できるかは、&lt;a href="http://twitter.com/statuses/public_timeline.xml"&gt;http://twitter.com/statuses/public_timeline.xml&lt;/a&gt;にブラウザでアクセスして確認してみてください。&lt;/p&gt;
&lt;p&gt;取得したXMLをDataGridに表示させるには、dataProviderを使用します。ここにはXMLオブジェクト等を指定することができます。具体的にはdataProvider="{twitter_timeline.lastResult.statuses.status}"とします。これは、HTTPServiceであるtwitter_timeline(ID)のlastResultファンクション（取得した内容（オブジェクト、ここではXMLオブジェクト）を返す）のstatusesタグの、statusタグを指定していることになります。&lt;/p&gt;
&lt;p&gt;そして、DataGridのカラムであるmx:DataGridColumnのdataField属性に、"text"と記述します。これはstatusタグのtextタグの内容をセットしています。後はこれがstatusタグの回数分、自動的に出力されます。Airアプリケーションを実行して確認してみてください。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;mx:DataGrid&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dataProvider=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{twitter_timeline.lastResult.statuses.status}&amp;quot;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;mx:columns&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;mx:DataGridColumn&lt;/span&gt; &lt;span class="na"&gt;headerText=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dataField=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/mx:columns&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/mx:DataGrid&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5.次に、screen_nameを取得します。&lt;/p&gt;
&lt;p&gt;screen_nameはstatusタグのuserタグの中にあります。通常、DataGridタグ内では、{data}として、dataProviderのデータを取得できます。但し、dataField属性には、使用できません。そこでmx:itemRendererを使用します。これでDaraGridColumn内のレンダリングコンポーネントを差し替えることができます。下記のようにして、mx:labelコンポーネントに差し替えてtext属性に{data.user.screen_name}をセットしています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;mx:DataGridColumn&lt;/span&gt; &lt;span class="na"&gt;headerText=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;mx:itemRenderer&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;mx:Component&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;mx:Label&lt;/span&gt; &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{data.user.screen_name}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/mx:Component&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/mx:itemRenderer&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/mx:DataGridColumn&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6.次に、ユーザの画像を表示してみます。&lt;/p&gt;
&lt;p&gt;DataGridColumnに画像を表示するには、itemRendererにmx.controls.Imageを指定します。これにより、このmx.controls.Imageのsource属性にURLをセットすることで画像として表示されます。ここまで全て合わせると下記のようになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;utf-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;mx:WindowedApplication&lt;/span&gt; &lt;span class="na"&gt;xmlns:mx=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.adobe.com/2006/mxml&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;layout=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;absolute&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;creationComplete=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter_timeline.send()&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;mx:HTTPService&lt;/span&gt;
    &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;twitter_timeline&amp;quot;&lt;/span&gt;
    &lt;span class="na"&gt;url=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://twitter.com/statuses/public_timeline.xml&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;

  &lt;span class="nt"&gt;&amp;lt;mx:DataGrid&lt;/span&gt; &lt;span class="na"&gt;x=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;y=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dataProvider=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{twitter_timeline.lastResult.statuses.status}&amp;quot;&lt;/span&gt;  &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;mx:columns&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;mx:DataGridColumn&lt;/span&gt; &lt;span class="na"&gt;headerText=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;mx:itemRenderer&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;mx:Component&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;mx:Image&lt;/span&gt; &lt;span class="na"&gt;source=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{data.user.profile_image_url}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class="nt"&gt;&amp;lt;/mx:Component&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/mx:itemRenderer&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/mx:DataGridColumn&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;mx:DataGridColumn&lt;/span&gt; &lt;span class="na"&gt;headerText=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;mx:itemRenderer&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;mx:Component&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;mx:Label&lt;/span&gt; &lt;span class="na"&gt;text=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;{data.user.screen_name}&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class="nt"&gt;&amp;lt;/mx:Component&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/mx:itemRenderer&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;/mx:DataGridColumn&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;mx:DataGridColumn&lt;/span&gt; &lt;span class="na"&gt;headerText=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;dataField=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/mx:columns&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/mx:DataGrid&amp;gt;&lt;/span&gt;

&lt;span class="nt"&gt;&amp;lt;/mx:WindowedApplication&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;これでAirアプリケーションを実行してみてください。タイムラインが表示されます。&lt;/p&gt;</summary></entry><entry><title>Android - サンプルアプリケーションの概要</title><link href="http://blog.dataich.com/2008/06/09/android-sample-application" rel="alternate"></link><updated>2008-06-09T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-06-09:2008/06/09/android-sample-application</id><summary type="html">&lt;p&gt;前回作成したサンプルアプリケーションのディレクトリ構成を見てみると、下記のようになっています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;android
├── AndroidManifest.xml
├── res
│   ├── drawable
│   │   └── icon.png
│   ├── layout
│   │   └── main.xm
│   └── values
│       └── strings.xml
└── src
    └── com
        └── lancard
            └── tasklist
                ├── R.java
                └── TaskList.java
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;まずは、resから見ていきます。&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;&lt;strong&gt;drawable&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;ここには、アプリケーションで使用する画像ファイルを配置します。&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;layout&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;ここには、アプリケーションで使用する画面定義ファイルを配置します。
デフォルトではmain.xmlが作成されていますが、アプリケーションによっては複数の画面を使用したい場合もあります。
その場合には、ここにxmlを追加することになります。&lt;/dd&gt;
&lt;dt&gt;&lt;strong&gt;values&lt;/strong&gt;&lt;/dt&gt;
&lt;dd&gt;ここには、アプリケーションで使用する、文字列定義等のファイルを配置します。デフォルトではstrings.xmlが用意されていますが、他にもarrays.xml、colors.xmlなどを配置できます。&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;次に、srcを見てみます。&lt;/p&gt;
&lt;h4&gt;R.java&lt;/h4&gt;
&lt;p&gt;res配下の各種定義ファイルに書かれているリソースにアクセスするためのクラスで、自動生成され、直接編集してはいけません。
ソースを見てみると下記のようになっているかと思います。
res配下のディレクトリ構成と同じように、クラスが作成されているかと思います。
res/drawable/icon.pnfの場合は、R.drawable.iconとなっています。
res/strings.xmlの場合は、xml 内のresources/stringの属性app_nameが読み込まれています。
これを使用して、各種リソースにアクセスすることになります。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;package com.lancard.tasklist;

public final class R {
    public static final class attr {
    }

    public static final class drawable {
        public static final int icon=0x7f020000;
    }

    public static final class layout {
        public static final int main=0x7f030000;
    }

    public static final class string {
        public static final int app_name=0x7f040000;
    }
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;TaskList.java&lt;/h4&gt;
&lt;p&gt;メインクラスになります。ソースを見てみます。
基本的にメインクラスは、android.app.Activityを継承して作成します。
もちろん、 Activityクラスを継承した別クラスも用意されています。
onCreateメソッドは、アプリケーション実行時に最初に呼ばれるメソッドで、メソッドの最初で親クラスのonCreateメソッドを呼び出す必要があります。
その後、setContentView(R.layout.main)として、メイン画面のビュー定義をセットしています。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;package&lt;/span&gt; &lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lancard&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tasklist&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.app.Activity&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;android.os.Bundle&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;TaskList&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;Activity&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;

    &lt;span class="o"&gt;/**&lt;/span&gt; &lt;span class="n"&gt;Called&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;activity&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt; &lt;span class="n"&gt;created&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="o"&gt;*/&lt;/span&gt;
    &lt;span class="nd"&gt;@Override&lt;/span&gt;
    &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;void&lt;/span&gt; &lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Bundle&lt;/span&gt; &lt;span class="n"&gt;icicle&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;onCreate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;icicle&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;setContentView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;layout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;次に、AndroidManifest.xmlを見てみます。
アプリケーション全体の設定ファイルになっており、デフォルトでは下記のようになっているかと思います。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;manifest&lt;/span&gt; &lt;span class="na"&gt;xmlns:android=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://schemas.android.com/apk/res/android&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;package=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;com.lancard.tasklist&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;application&lt;/span&gt; &lt;span class="na"&gt;android:icon=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@drawable/icon&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;activity&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;.TaskList&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;android:label=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;@string/app_name&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;intent-filter&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;action&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.action.MAIN&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class="nt"&gt;&amp;lt;category&lt;/span&gt; &lt;span class="na"&gt;android:name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;android.intent.category.LAUNCHER&amp;quot;&lt;/span&gt; &lt;span class="nt"&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;/intent-filter&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/activity&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/application&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/manifest&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3行目の android:icon="@drawable/icon" は、R.drawable.iconを指定していることになります。&lt;/p&gt;</summary></entry><entry><title>Android - 開発環境</title><link href="http://blog.dataich.com/2008/06/09/development-environment-android" rel="alternate"></link><updated>2008-06-09T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-06-09:2008/06/09/development-environment-android</id><summary type="html">&lt;h3&gt;開発環境を構築する&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Android SDKのインストール
Android SDKをダウンロードし、任意ディレクトリに解凍します。&lt;/li&gt;
&lt;li&gt;Eclipse Pluginのインストール
Help&amp;gt;Software Updates&amp;gt;Find and Installにて、下記URLを追加し、インストールします。&lt;/li&gt;
&lt;li&gt;Windows&amp;gt;Preference&amp;gt;AndroidのSDK LocationにAndroid SDKを解凍したディレクトリを指定します。 これで開発環境構築は完了となります。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;サンプルプロジェクト作成&lt;/h3&gt;
&lt;p&gt;EclipseにてFile&amp;gt;New&amp;gt;Projectを選択し、Android&amp;gt;Android Projectを選択。
下記のように入力して、プロジェクトを作成します。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Project name android&lt;ul&gt;
&lt;li&gt;Eclipseでのプロジェクト名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Package name com.lancard.tasklist&lt;ul&gt;
&lt;li&gt;アプリケーションのパッケージ名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Activity name TaskList&lt;ul&gt;
&lt;li&gt;アプリケーションのメインクラス名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Application name Task List&lt;ul&gt;
&lt;li&gt;アプリケーション名（画面に表示するタイトルとしても使用）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;エミュレータを実行する&lt;/h3&gt;
&lt;p&gt;Eclipse上で、プロジェクトを右クリック、Run As&amp;gt;Android Applicationを選択。
下記のように、エミュレータが起動すれば成功です。&lt;/p&gt;
&lt;p&gt;&lt;img alt="android" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/android.png" /&gt;&lt;/p&gt;</summary></entry><entry><title>PHPでのunpack</title><link href="http://blog.dataich.com/2008/04/25/php-unpack" rel="alternate"></link><updated>2008-04-25T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-04-25:2008/04/25/php-unpack</id><summary type="html">&lt;p&gt;PHPでのunpackがperlと少し違った。&lt;/p&gt;
&lt;script src="https://gist.github.com/dataich/249009.js"&gt;&lt;/script&gt;

&lt;h4&gt;PHPでは&lt;/h4&gt;
&lt;script src="https://gist.github.com/dataich/249010.js"&gt;&lt;/script&gt;

&lt;h4&gt;両方とも出力結果は&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;12345 1234567 12
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>X02HT カスタマイズメモ</title><link href="http://blog.dataich.com/2008/04/03/x02ht-customize-memo" rel="alternate"></link><updated>2008-04-03T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-04-03:2008/04/03/x02ht-customize-memo</id><summary type="html">&lt;h4&gt;アプリケーションアンロック&lt;/h4&gt;
&lt;p&gt;1.regeditSTG2.exe（&lt;a href="http://www.modaco.com/content/HTC-Breeze-Breeze-MoDaCo-com/244205/Mteor-application-unlock-solution/"&gt;http://www.modaco.com/content/HTC-Breeze-Breeze-MoDaCo-com/244205/Mteor-application-unlock-solution/&lt;/a&gt; ）をX02HT側で起動し、下記レジストリの変更&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;[\HKEY_LOCAL_MACHINE\Security\Policies\Policies]&lt;/span&gt;
&lt;span class="na"&gt;00001001&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;00001005&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;40&lt;/span&gt;
&lt;span class="na"&gt;00001017&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;144&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.一旦、再起動&lt;/p&gt;
&lt;p&gt;3.ホストと接続している状態で、&lt;a href="http://wiki.xda-developers.com/uploads/SDA_ApplicationUnlock.zip"&gt;SDA_ApplicationUnlock&lt;/a&gt;を起動し、実行する。&lt;/p&gt;
&lt;p&gt;4.再起動し、完了。&lt;/p&gt;
&lt;h4&gt;フォント変更&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;システムフォント変更
フォント（ttc等）を\Windows\にコピー&lt;/li&gt;
&lt;li&gt;Outlookフォント変更
\Windows\msgothic.ac3を0バイトの同名ファイルで上書き→これをしないと、Outlookのフォントが変わらない ※VistaのMobileCenter経由だと上書きできなかったので、XPのActiveSyncにて上書きした&lt;/li&gt;
&lt;li&gt;レジストリ変更&lt;br /&gt;
※下記表のシステムフォント変更参照&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;レジストリ変更&lt;/h4&gt;
&lt;p&gt;ホストと接続している状態で、MobileRegistryEditor（&lt;a href="http://www.freewareppc.com/utilities/mobileregistryeditor.shtml"&gt;http://www.freewareppc.com/utilities/mobileregistryeditor.shtml&lt;/a&gt;）を起動し、実行する。
&lt;table border="0"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Key&lt;/th&gt;
&lt;th&gt;Value&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoftBankメール保存ディレクトリ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\Software\Arcsoft\ArcSoft MMS UA\Config\Folder&lt;/td&gt;
&lt;td&gt;CannedTextFile&lt;/td&gt;
&lt;td&gt;「Program Files」を「Storage Card」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoftBankメール保存ディレクトリ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\Software\Arcsoft\ArcSoft MMS UA\Config\Folder&lt;/td&gt;
&lt;td&gt;TemplatePath&lt;/td&gt;
&lt;td&gt;「Program Files」を「Storage Card」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SoftBankメール保存ディレクトリ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\Software\Arcsoft\ArcSoft MMS UA\Config\Folder&lt;/td&gt;
&lt;td&gt;UAContentsPath&lt;/td&gt;
&lt;td&gt;「Program Files」を「Storage Card」&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IE初期ページ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\AboutURLs&lt;/td&gt;
&lt;td&gt;home_0409&lt;/td&gt;
&lt;td&gt;任意URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IE初期ページ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Internet Explorer\AboutURLs&lt;/td&gt;
&lt;td&gt;home_0411&lt;/td&gt;
&lt;td&gt;任意URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Outlookメール新規作成時サイズ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\Software\Microsoft\Inbox\RichEditHostFontSize&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HSDPAアイコン表示&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\Software\OEM\RIL&lt;/td&gt;
&lt;td&gt;EnableHSDPAIcon&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;キャッシュ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\System\GDI\GLYPHCACHE&lt;/td&gt;
&lt;td&gt;limit&lt;/td&gt;
&lt;td&gt;2097152&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;キャッシュ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\System\StorageManager\FATFS&lt;/td&gt;
&lt;td&gt;CacheSize&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;キャッシュ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\System\StorageManager\Filters\fsreplxfilt&lt;/td&gt;
&lt;td&gt;ReplStoreCacheSize&lt;/td&gt;
&lt;td&gt;256&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リアルQVGA&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\Driver\Display\GPE&lt;/td&gt;
&lt;td&gt;LogicalPixelsX&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;リアルQVGA&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\Driver\Display\GPE&lt;/td&gt;
&lt;td&gt;LogicalPixelsY&lt;/td&gt;
&lt;td&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メニューフォントサイズ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\System\GWE\Menu\PopFnt&lt;/td&gt;
&lt;td&gt;Ht&lt;/td&gt;
&lt;td&gt;4294967284&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;システムフォントサイズ&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\System\GDI\SYSFNT\&lt;/td&gt;
&lt;td&gt;Ht&lt;/td&gt;
&lt;td&gt;4294967284&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;システムフォント変更&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\FontLink\SystemLink&lt;/td&gt;
&lt;td&gt;Courier New&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;システムフォント変更&lt;/td&gt;
&lt;td&gt;\HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\FontLink\SystemLink&lt;/td&gt;
&lt;td&gt;Nina&lt;/td&gt;
&lt;td&gt;-&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;&lt;/p&gt;
&lt;h4&gt;インストールアプリケーション&lt;/h4&gt;
&lt;table border="0"&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;アラーム&lt;/td&gt;
&lt;td&gt;[CT AlarmClock Lite for WM Smartphones](http://www.connectivetools.com/)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ClearType有効&lt;/td&gt;
&lt;td&gt;[ctt](http://forum.xda-developers.com/showthread.php?t=260506)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;コピーペースト&lt;/td&gt;
&lt;td&gt;[EasyClip](http://d.hatena.ne.jp/KOTETU/00000115)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Skype、Twitterその他&lt;/td&gt;
&lt;td&gt;[fring](http://www.fring.com/download/)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;予定管理&lt;/td&gt;
&lt;td&gt;[OffisnailDate](http://www.offisnail.info/index.html)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;キー割り当て&lt;/td&gt;
&lt;td&gt;[StdLink](http://www.offisnail.info/index.html)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;GoogleCalendarとの同期&lt;/td&gt;
&lt;td&gt;[OggSync](http://oggsync.com/)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;

&lt;/div&gt;</summary></entry><entry><title>jrubyでopenssl</title><link href="http://blog.dataich.com/2008/03/26/openssl-on-jruby" rel="alternate"></link><updated>2008-03-26T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-03-26:2008/03/26/openssl-on-jruby</id><summary type="html">&lt;p&gt;まずはjruby用のopensslをgemにてインストール&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# jruby -S gem install jruby-openssl
Successfully installed jruby-openssl-0.2
1 gem installed
Installing ri documentation for jruby-openssl-0.2...
Installing RDoc documentation for jruby-openssl-0.2...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;コードとしては&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;require &amp;#39;openssl&amp;#39;

key = &amp;quot;キーとなる文字列&amp;quot;
target = &amp;quot;暗号化ターゲット&amp;quot;
aes = OpenSSL::Cipher::Cipher.new(&amp;quot;AES-256-CBC&amp;quot;)
aes.encrypt
aes.pkcs5_keyivgen(key)

# 暗号化
# 溢れる分があるので、finalの結合
value = aes.update(target) + aes.final
# DBに登録したいのでHEXにしておく。
value = value.unpack(&amp;quot;H*&amp;quot;)[0]

# 複合化
aes = OpenSSL::Cipher::AES.new(&amp;quot;256-CBC&amp;quot;)
aes.decrypt
aes.pkcs5_keyivgen(key)

# HEXをunpackし、複合化する。ここでもfinaｌを結合
value = aes.update([value].pack(&amp;quot;H*&amp;quot;)) + aes.final
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Postgres8.3 インストール（Linux）</title><link href="http://blog.dataich.com/2008/03/21/install-postgres83-on-linux" rel="alternate"></link><updated>2008-03-21T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-03-21:2008/03/21/install-postgres83-on-linux</id><summary type="html">&lt;h4&gt;ソース取得&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;wget ftp://ftp.jp.postgresql.org/source/v8.3.0/postgresql-8.3.0.tar.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;&lt;/h4&gt;
&lt;h4&gt;ビルドに必要なライブラリをインストール&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;yum install zlib-devel
&lt;span class="nv"&gt;$ &lt;/span&gt;yum install readline-devel
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;postgresユーザ作成&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;groupadd postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;useradd -g postgres -d /usr/local/pgsql postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;passwd postgres
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;ビルド&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;tar xvfz postgresql-8.3.0.tar.gz
&lt;span class="nv"&gt;$ &lt;/span&gt;&lt;span class="nb"&gt;cd &lt;/span&gt;postgresql-8.3.0
&lt;span class="nv"&gt;$ &lt;/span&gt;./configure --prefix&lt;span class="o"&gt;=&lt;/span&gt;/usr/local/pgsql
&lt;span class="nv"&gt;$ &lt;/span&gt;make all
&lt;span class="nv"&gt;$ &lt;/span&gt;make install
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;所有者変更&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;chown -R postgres:postgres /usr/local/pgsql
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;データディレクトリ作成&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;su - postgres
&lt;span class="c"&gt;# mkdir /usr/local/pgsql/data&lt;/span&gt;
&lt;span class="c"&gt;# /usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h4&gt;初期設定&lt;/h4&gt;
&lt;h5&gt;プロファイルを開いて&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# vi ~postgres/.bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;下記を追加&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="x"&gt;export PATH=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PATH&lt;/span&gt;&lt;span class="x"&gt;:/usr/local/pgsql/bin&lt;/span&gt;
&lt;span class="x"&gt;export POSTGRES_HOME=/usr/local/pgsql&lt;/span&gt;
&lt;span class="x"&gt;export PGLIB=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_HOME&lt;/span&gt;&lt;span class="x"&gt;/lib&lt;/span&gt;
&lt;span class="x"&gt;export PGDATA=&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_HOME&lt;/span&gt;&lt;span class="x"&gt;/data&lt;/span&gt;
&lt;span class="x"&gt;export MANPATH=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;MANPATH&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;:&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;POSTGRES_HOME&lt;/span&gt;&lt;span class="x"&gt;/man&lt;/span&gt;
&lt;span class="x"&gt;export LD_LIBRARY_PATH=&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;LD_LIBRARY_PATH&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;PGLIB&lt;/span&gt;&lt;span class="x"&gt;&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;読み直しておく&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;# source ~postgres/.bash_profile
&lt;/pre&gt;&lt;/div&gt;


&lt;h5&gt;自動起動設定&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nv"&gt;$ &lt;/span&gt;cp /usr/local/src/postgresql-8.3.0/contrib/start-scripts/linux /etc/rc.d/init.d/postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;chmod +x /etc/rc.d/init.d/postgres
&lt;span class="nv"&gt;$ &lt;/span&gt;chkconfig --add postgres
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>mysqldumpでのBLOB項目</title><link href="http://blog.dataich.com/2008/03/19/mysqldump-blob" rel="alternate"></link><updated>2008-03-19T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-03-19:2008/03/19/mysqldump-blob</id><summary type="html">&lt;p&gt;mysqldumpに--hex-blobオプションをつけてやることで、BLOBカラムがHEX出力される。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mysqldump --hex-blob -u ユーザ -p データベース名 &amp;gt; 出力ファイルパス
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>オープンソースのエコシステム</title><link href="http://blog.dataich.com/2008/03/11/eco-system-for-opensource" rel="alternate"></link><updated>2008-03-11T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-03-11:2008/03/11/eco-system-for-opensource</id><summary type="html">&lt;p&gt;先日、長崎CSK というイベントがあった。&lt;/p&gt;
&lt;p&gt;とても意義のある話が聞けたんですけど、今の自分の身の丈に合った話からひとつ。
「オープンソースについて」という題目で、栗原傑享氏 （株式会社グルージェント　代表取締役）（特定非営利活動法人Seasarファウンデーション 代表理事） の講演があった。
&lt;strong&gt;エコシステムの破綻&lt;/strong&gt;という話、納得。
オープンソースを利用するということは、無料でライブラリが使えるとか、そういうことではなくって、オープンソースという取り組みに参加するということ。
コミュニティとの関わり方と同じで、受身じゃ駄目ということ。
というかオープンソース云々より、人として問題。&lt;/p&gt;
&lt;p&gt;こんなことで貢献できる。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;バグを報告する。&lt;/li&gt;
&lt;li&gt;バグを修正する。&lt;/li&gt;
&lt;li&gt;改善点を報告する。&lt;/li&gt;
&lt;li&gt;改善点を実装する。&lt;/li&gt;
&lt;li&gt;自ら何かオープンソースで提供する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;簡単なとこでは&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用後、レポートしBLOG等に載せる。&lt;/li&gt;
&lt;li&gt;バグを報告する。&lt;/li&gt;
&lt;li&gt;改善点を報告する。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;もちろん、自分自身でオープンなものを提供するのもいい。
何かやらなきゃ、おんぶに抱っこってのは気持ちが悪い。&lt;/p&gt;</summary></entry><entry><title>MySQL CSVインポート</title><link href="http://blog.dataich.com/2008/03/04/mysql-csv-import" rel="alternate"></link><updated>2008-03-04T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-03-04:2008/03/04/mysql-csv-import</id><summary type="html">&lt;div class="highlight"&gt;&lt;pre&gt;load data local infile &amp;quot;CSVファイルパス&amp;quot; into table テーブル名 fields terminated by &amp;#39;,&amp;#39;;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>「長崎ＣＳＫ（Community Summit Kyushu）」</title><link href="http://blog.dataich.com/2008/02/23/nagasaki-csk" rel="alternate"></link><updated>2008-02-23T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-02-23:2008/02/23/nagasaki-csk</id><summary type="html">&lt;p&gt;イベント終了後には懇親会も行う予定です（予算は１人約4,000円）。&lt;/p&gt;
&lt;p&gt;興味のあるかたは、&lt;a href="http://form1.fc2.com/form/?id=280244"&gt;こちら&lt;/a&gt;から申込お願いします！&lt;/p&gt;</summary></entry><entry><title>第2回 イケテル勉強会</title><link href="http://blog.dataich.com/2008/02/04/iketeru-benkyokai-2" rel="alternate"></link><updated>2008-02-04T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-02-04:2008/02/04/iketeru-benkyokai-2</id><summary type="html">&lt;p&gt;最近&lt;a href="http://rbc-nagasaki.blogspot.com/"&gt;RBC長崎&lt;/a&gt;というコミュニティに参加している。&lt;/p&gt;
&lt;p&gt;初めて参加するコミュニティだけども、良い刺激に満ちてる。
内容的にはほとんど知ってるところだったけど、クロージャとかもっと知りたいと思った。&lt;/p&gt;
&lt;p&gt;あと、参加するだけでは駄目、何かコミットしないと。
Railsのデモアプリのあれも、早いうちに本公開したい。
杉山さんが仰ってた化学反応を起こすためには受け身じゃだめだと。&lt;/p&gt;
&lt;p&gt;準備してくださった皆さん、ありがとうございました。私も時間が取れるときは、お手伝いします。&lt;/p&gt;
&lt;p&gt;あとね、例の島パーティ。
ライブやらしてもらえんかなあ、とか思ってみたり。
ギター一人で弾くとか、ありなんかな。
あくまで参加できたらですが。&lt;/p&gt;</summary></entry><entry><title>仮想デスクトップ</title><link href="http://blog.dataich.com/2008/01/22/virtual-desktop" rel="alternate"></link><updated>2008-01-22T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2008-01-22:2008/01/22/virtual-desktop</id><summary type="html">&lt;p&gt;&lt;a href="http://www.machu.jp/"&gt;machuさん&lt;/a&gt;に触発された使い始めた仮想デスクトップ。&lt;/p&gt;
&lt;p&gt;私が選んだのは、ドイツ産の&lt;a href="http://www.dexpot.de/"&gt;dexpot&lt;/a&gt;。いやーかなり作業効率あがりました。
メインタスク、割り込みタスク、メール、Twitter&amp;amp;Skype、グループウェア系と分けておくことで現在のタスクに集中できる！！
また、仮想デスクトップ起動時にスタートアップするアプリを設定できる！！&lt;/p&gt;
&lt;p&gt;家ではこんな感じでやってます！！&lt;/p&gt;
&lt;p&gt;&lt;img alt="virtual_desktop" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/virtual_desktop.jpg" /&gt;&lt;/p&gt;</summary></entry><entry><title>iPod touch jailbreak</title><link href="http://blog.dataich.com/2007/11/06/ipod-touch-jailbreak" rel="alternate"></link><updated>2007-11-06T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-11-06:2007/11/06/ipod-touch-jailbreak</id><summary type="html">&lt;p&gt;&lt;img alt="ipodtouch" src="http://dl.dropbox.com/u/126064/blog.dataich.com.images/ipodtouch.png" title="ipodtouch" /&gt;&lt;/p&gt;
&lt;p&gt;こちらのページを参考にさせていただき、jailbreak&amp;amp;iPhoneアプリインストール。
ただの自己満足での投稿です。&lt;/p&gt;</summary></entry><entry><title>VirtualBoxをVista上で動かす</title><link href="http://blog.dataich.com/2007/09/07/virtualbox-on-vista" rel="alternate"></link><updated>2007-09-07T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-09-07:2007/09/07/virtualbox-on-vista</id><summary type="html">&lt;p&gt;とてつもなくはまった。
Vista上にVirtualBox1.5.0を入れたが、CentOSのインストールでこける。
調べてみるとVistaの場合、下記を実行しなければならないことに気づく。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cd L:\\InnoTek VirtualBox
VBoxSVC.exe /ReRegServer
regsvr32.exe VBoxC.dll
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;また、vistaだからなのかは分らないが、vdiを固定サイズで作成するとゲストOSのインストールにこける、、、。
とりあえずは、可変サイズで作成することで回避。&lt;/p&gt;</summary></entry><entry><title>tugboat</title><link href="http://blog.dataich.com/2007/08/30/tugboat" rel="alternate"></link><updated>2007-08-30T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-08-30:2007/08/30/tugboat</id><summary type="html">&lt;p&gt;seasarで構築されたオープンソースプロジェクト管理システム。&lt;/p&gt;
&lt;p&gt;環境構築は簡単。
他のメンバーがどんなタスクを抱えているか、今何をやっているかが管理できる。
なにはともあれ、インターフェースがとても良い。
そのうち本格的に導入するつもり。（案が通れば）&lt;/p&gt;
&lt;p&gt;&lt;a href="http://tugboat-gtd.sandbox.seasar.org/"&gt;Tugboat.GTD&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>Smartyを携帯向けに</title><link href="http://blog.dataich.com/2007/07/22/smarty-for-mobile" rel="alternate"></link><updated>2007-07-22T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-07-22:2007/07/22/smarty-for-mobile</id><summary type="html">&lt;p&gt;Smartyを携帯に対応させようとすると、どうしてもSJISの問題が発生する。「{」「}」がSJISのコードに含まれるため、テンプレートはSJISでは書けない。
そこで、Smartyの&lt;a  href="http://smarty.php.net/manual/ja/advanced.features.outputfilters.php" target="_blank"&gt;outputfilter&lt;/a&gt;を使用した。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="c1"&gt;// 画面出力時に、テンプレートをUTF-8からSJISに変換する。&lt;/span&gt;
&lt;span class="c1"&gt;//&lt;/span&gt;
&lt;span class="k"&gt;function&lt;/span&gt; &lt;span class="nf"&gt;filterUTF8ToSJIS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nv"&gt;$smarty&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;mb_convert_encoding&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;$buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;SJIS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nv"&gt;$smarty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;Smarty&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;                              &lt;span class="c1"&gt;//Smartyオブジェクト生成&lt;/span&gt;
&lt;span class="nv"&gt;$smarty&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="na"&gt;register_outputfilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;filterUTF8ToSJIS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="c1"&gt;//フィルターの登録&lt;/span&gt;
&lt;span class="nb"&gt;ini_set&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default_charset&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Shift_JIS&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;            &lt;span class="c1"&gt;//PHPの設定default_charsetにSJISを設定&lt;/span&gt;
&lt;span class="cp"&gt;?&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>PDTインストール</title><link href="http://blog.dataich.com/2007/07/21/install-pdt" rel="alternate"></link><updated>2007-07-21T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-07-21:2007/07/21/install-pdt</id><summary type="html">&lt;p&gt;EclipseのPHP開発環境であるPDT（PHP Development Tools）を導入してみた。
私は基本的に言語によってEclipseを分けているのでpluginではなく、all-in-oneでインストールした。
手順は下記の通り。&lt;/p&gt;
&lt;h3&gt;PDTインストール&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://www.eclipse.org/pdt/"&gt;http://www.eclipse.org/pdt/&lt;/a&gt;＞Downloads＞S20070611-M1＞pdt-all-in-one-S20070611_M1-win32.zip（2007/07/20現在）&lt;/li&gt;
&lt;li&gt;任意のディレクトリ（ここではL:\PHPeclipse）に解凍&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;PDT日本語化&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="http://mergedoc.sourceforge.jp"&gt;http://mergedoc.sourceforge.jp&lt;/a&gt;/＞1.2.0より、pleiades_1.2.0.zipをダウンロード&lt;/li&gt;
&lt;li&gt;ダウンロードしたpleiades_1.2.0.zipを解凍し、L:\PHPeclipseに上書き&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eclipse.iniの最終行に下記を追加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;-javaagent:plugins/jp.sourceforge.mergedoc.pleiades/pleiades.jar
&lt;/pre&gt;&lt;/div&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;eclipseを起動し、日本語化されていることを確認&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary></entry><entry><title>開発環境としてのVista</title><link href="http://blog.dataich.com/2007/07/12/development-environment-on-vista" rel="alternate"></link><updated>2007-07-12T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-07-12:2007/07/12/development-environment-on-vista</id><summary type="html">&lt;p&gt;最近自宅用開発マシンを購入しました。
前マシンのスペックがあまりにも低かったため買い換えたんですが、いざとなったらXPとデュアルすればいいかと思い、冷もん好き（方言？）なこともありVistaにて。
まあサクサクと動きます。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;プロセッサ&lt;/td&gt;
&lt;td&gt;AMD Athlon(tm) 64 X2 Dual Core Processor 4600+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;メモリ (RAM)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;2.00 GB&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;グラフィックス&lt;/td&gt;
&lt;td&gt;Radeon X1300/X1550 Series&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3&gt;開発環境としての注意点&lt;/h3&gt;
&lt;h4&gt;インストール時&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;プログラム等をインストールする場合、右クリックにて管理者として実行し、C以外のパーティションにインストールする。&lt;/li&gt;
&lt;li&gt;管理者として実行できないインストーラ（.msi等）の場合、コマンドプロンプトを管理者として実行し、「msiexec /i ????????.msi」としてインストーラを起動させる。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4&gt;実行時&lt;/h4&gt;
&lt;p&gt;こちらもやはり右クリックにて管理者として実行。煩わしい場合は、右クリック＞プロパティ＞互換性＞特権レベルの「管理者としてこのプログラムを実行する」にチェックをいれておく。&lt;/p&gt;
&lt;p&gt;これらを意識しておくと、わりかし問題ないです。この方法で、Eclipse、Apache、Tomcat、Cygwin等動かしています。しかしまあ、UACの意味が無くなっているような、、、。まあご愛敬ということで。&lt;/p&gt;</summary></entry><entry><title>Redmine</title><link href="http://blog.dataich.com/2007/06/30/redmine" rel="alternate"></link><updated>2007-06-30T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-06-30:2007/06/30/redmine</id><summary type="html">&lt;p&gt;RORで構築されたオープンソース（GPL）のプロジェクト管理システム&lt;/p&gt;
&lt;p&gt;一度イントールしてみましたが、非常に良いです。
まだ発展途上ではあるけれど、tracより好きかも。
導入がとても楽ですし。
個人でやるプロジェクトでも、リソース、知識共有のためにやっておくといいことありそうです。&lt;/p&gt;
&lt;p&gt;セットアップ方法等、そのうちUPしようかなとも思っています。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.redmine.org/"&gt;Redmine - Overview - Redmine&lt;/a&gt;&lt;/p&gt;</summary></entry><entry><title>自己紹介</title><link href="http://blog.dataich.com/2007/06/24/introduction" rel="alternate"></link><updated>2007-06-24T00:00:00+09:00</updated><author><name>dataich</name></author><id>tag:blog.dataich.com,2007-06-24:2007/06/24/introduction</id><summary type="html">&lt;p&gt;初めまして。しがないプログラマです。
自分の備忘録を兼ねて、気になったネタ、ツール等を載せていきたいと思ってます。&lt;/p&gt;</summary></entry></feed>